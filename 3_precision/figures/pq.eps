%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9RCF36.tmp.pdf
%%Creator: Adobe Acrobat 9.4.6
%%For: Thomas
%%CreationDate: 21/6/2013, 12:38:34
%%BoundingBox: 0 0 397 182
%%HiResBoundingBox: 0 0 396.3352 181.3234
%%CropBox: 0 0 396.3352 181.3234
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1107 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2013-06-21T12:37:58+01:00"
   xmp:CreateDate="2013-06-21T12:37:58+01:00"
   xmp:MetadataDate="2013-06-21T12:37:57+01:00"
   xmp:CreatorTool="PScript5.dll Version 5.2.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:515a20ac-8b2d-4699-9180-a231abbacbe9"
   xmpMM:InstanceID="uuid:228c650a-1e0c-4f18-a8b5-a90e5c2da71f"
   pdf:Producer="GPL Ghostscript 8.15">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Microsoft Word - Polar_form_calcuation_v4_toThomas.docx</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>kkwok</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -181.323 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
7.62939e-6 0 mo
7.62939e-6 181.323 li
396.335 181.323 li
396.335 0 li
cp
clp
[1 0 0 1 -105.029 0 ]ct
false sop
/0 
[/DeviceCMYK] /CSA add_res
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: WGJAAA+TTE22082D8t00 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /WGJAAA+TTE22082D8t00 def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g3 put
dup 2 /g38 put
dup 3 /g349 put
dup 4 /g336 put
dup 5 /g856 put
dup 6 /g1005 put
dup 7 /g894 put
dup 8 /g258 put
dup 9 /g895 put
dup 10 /g17 put
dup 11 /g400 put
dup 12 /g272 put
dup 13 /g410 put
dup 14 /g396 put
dup 15 /g437 put
dup 16 /g286 put
dup 17 /g381 put
dup 18 /g296 put
dup 19 /g374 put
dup 20 /g367 put
dup 21 /g373 put
dup 22 /g282 put
dup 23 /g271 put
dup 24 /g455 put
dup 25 /g449 put
dup 26 /g361 put
dup 27 /g854 put
dup 28 /g4 put
dup 29 /g393 put
dup 30 /g882 put
dup 31 /g454 put
dup 32 /g346 put
def
/FontBBox {-476 -194 1214 952} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
33 dict dup begin
/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C69233
4252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244
BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5
D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0
693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F53
02816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98
D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6F
ECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269
E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F
3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997
B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7
BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C0324
49885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D
5A11AF573B17CF9F38> |-
/g3 <1C60D8A8C9B888C146> |-
/g38 <1C60D8A8C9B770DA42EB776051437272AB3109214F2F5AF299B91EDE1F
768C5024668BC49B69066FA908CF8FE87EDFDF17A758EE488BEC994A194C62BD
1C9426343C7C81CA3B3F963FDAD914A0EC9F4FE665084402A52314B863A06B82
A12C3F91EE9C0F2B145AA7D2782C4C7297D5A7A4C8227440D2EB6A6858EEAF3E
8D5172513D85C8059F336BE8B10563AA3DFEF476A6E0B2054B979D1F9B467985
0776A59C7497BC538F93679A65B973B2A534700FFE8CC98CDC2940E7759A9043
FA0F4AD602EBE420E53281F2FA075E541FDAF915055861D63FE68E0F45> |-
/g349 <1C60D8A8C9B887F0644B8F9A77200B5B21E7A46843656F48CC872DF3A
FB58D86B9B1B70DF0F8BF4F1A9D845350075385C2FAC40F64A57A633024956B4
2D2D155265D68692B1DD96FCB1CFEA6F03B67B191D75D9251636A71B366F484A
C7DD61A648087A690F42FCD56728047D5F145B28180BC49A70304D616C17E086
88BC2AB34D235D029750826D6A02D57888DCAF080A15DCB2D8AE91CB7938E088
D7426B3BCAD6531F243F29763FBDE3F087E3965B6148DD52590D1BA20021D152
93CFC> |-
/g336 <1C60D8A8C9B7445140600976780BBEB6A3D2658D3A4C7F919C88C52D4
12C8E364C5F7636792196FD221C121AC8A143979AFAA3A09359F0F2A21E65145
0F6F05ACC0E82C2760ECA4A653600DE52AE0D5358458AF930D6BDEB0904E4313
A0CBCA78B5C6EE35CCCF928264F350C0A023EDD3B664C736748E408C524202A3
326D95C7DCABC59764E7D97C53C3E04189FF055F0A0F707215CE9EBCE6A5429E
BED17A701726A8DEDD69C85101530BFD06F1546D47732DA28D5440C29DB9FD39
2812122E25828F7402340CB2AAD1BBC054F22EBE3B4068E1189E1BBFDEDCE338
0BE2A1BC64D61665F8EA89BD12E55203D2F412C82771F2C0ABF3E56A249110A5
F4DFD7E943B7CBB3957D78564ABEBC14037C62116307C9CC2770007504568A49
6F0E371B5E27EA91CE4ED6B158CDD56E512A87B38DA763ADE44907E57CB7229D
283C8A7D867519E31285088BE518A70B9193ED1297DE2FF3E929169124C3A44E
72EDA1A3B2C0E0DA57F0E79BC1C7BEFED8509DD8CC00683DBCDE9C2A776B95D5
831197913BF75A301F1EB13F5C4E48D99B31FDB0B54BB7B640060AFF7A1619C4
EE7C3CA0DE734198387C7205D8F2F952A1BC7A9DB628AB7F298888007AA60454
9FA9EA5ECD6ED4A814A52FD636085B1A8D57F31E70472C30EB60858254A7B95E
2F6778797B84C60B2ED0823FE7265B0CE1B1A64D8F159C443134DC16E39D2079
47A0FD5903276> |-
/g856 <1C60D8A8C9B86ED904792469819B411F782D644953F5FB87FEF664579
CE5AF47E01D6D9A7DF6EB24F15E9AD1EE074A41E03462D7DE0F1E92BD9640F34
58F7DADF49E5D4EB0B3> |-
/g1005 <1C60D8A8C9B7A0860A305D7D1540DECC7BE2F83965065BA1F58088FE
751F51768999AF3CB0CBD98712B4A20A30CFDD23F3D718AE6664545AA64C90E8
7A977C061638AE7B9844BD53D39E1CD919540EC0AFC0ADDD639213BAA3C2156E
CF4D5FEFDF4B77C92C9A62F21FEF596A47F254F30F662D97990A276CD1E50761
DD9D07D78B626617E74128BC5D647B42ED807FE6DD0588AD25D211834DAC9410
A0AEBD06E6565C1DCBD86013B11A7BE0A2010B12635869FAC3323D92D6BCCC10
D02550F431D6753E5E6C65DB63D883AF6BCE4C75C5A66BF9AE47A5570BA4B61C
5763C152A7FDEC11C0C748631E999D604A7F2938BB57220CBE02AE758E601833
1661C475AA9DED7C59> |-
/g894 <1C60D8A8C9B83D5FF27DA8D8E6046A27BA23CC1486AB72A59E47AACC8
161CC74CDD95CC2A654D5856D60A8DC5F8C184EC1ABC4D1D2160575FE6D70949
B41A6CABCFACD73360CFC5DA53716AD56E7BCBA30E5CBADDBCE536F92B4EFC10
AF93D5AA400F7912003F9E093421F683C28EAAC53C2248A1C92A4ADDC6F6F189
A13C295B6CA124F9A4CA4E40FBBF41FDD3287A0301EBE9D805D7A4030F818C18
B05D8592B2DBF59F7F26BA45EDE7B24A816E6CC3105B053A64C91913E22DD3F6
6D2B695F53F3F722E2F8096827FF689C16601C625CCC1> |-
/g258 <1C60D8A8C9B75CBB53379352952B97D633633CE49B1F5650B8155AFDF
A57F94D359804093E4912F3B89577762AB5877203F1CDAD240C521DE74183EDA
10501967DB6487C182138B12C453C5DB9629F7EF021028117511EFEAB941896E
32D9CC68D6E66540771999A4E30C4826A52D7536EDDF7E00016C895CE43408B4
4BE33E2D9A6163827E05AB8B1144BC909A74F6D7828DE6E08164A25E320920E3
54020A41D59E9E3B008A20EC107F9E18745DE21F9AF293EB0F319B529D840D8B
A9319522EDDCACA13336C059581181C082BF0D7F4117FAEB429D871E099AEE43
94FED2FB3A1C712D1799055BA832AD846B95DA8BB4E63B103C908FA309FAA3B7
8140CE2A22AE06B2A1EA5BD3AA13DD1ED75DA4AD37493780FE662EF5D1B53C4A
F41845C0C77655CE94F0C9DEBE29248A1EAAF3A6EA79D5BB5C090457B818DD62
F70E197CEA94F90229AB4FD685A1ADB5E4E4C1DBDB28AA3854323EE2FD22692E
C70> |-
/g895 <1C60D8A8C9B83D5FF29F44B652980D05B9EE187D926BB2CE034E7CDFB
42233F20EA0B6A7D3053EB0C035C6C189F4DA6B49B40A0EB0636B7ACA2CF4279
2FC2164693E9F6F7B6636D9708884EE48CE23B1AFB94FA912772ABED4AB22E20
E0410244F282681ABF0BF3F1FF921D275AD5C6D7F8F439D5D0B2BAD1CBD8078F
961EB6B7FB4BFFE77692BCE19880B8A84987A61F63B3F03252C231FCBB5CB61D
BA6789BB581DA0ED1802F2C6AAE0EF2092080B688E21E45FC07A90B21EAB8701
889CC58EAA06C962B> |-
/g17 <1C60D8A8C9B79B8E992413FDCA75477B9D7B9A04CD6123BB6F56A9FDEC
C00D9728A7991DA2934283AC0CEE01FC1FAAD5EB3AB0B14B54FBF8D20FFC398F
5961BF67E7A7D450EE96781B748894F7B28CFF64B6593527AFD517F2D837CA22
127DD5B8B5DB428B5B30E96423884A9CB2092018BDE5D89DBC68D24BAE5CC3C4
CA2C637AD8EB033D5467D7A9D9BAF78FE973C94976565C5D2795A0EC3A3D0ED4
B239AE94024C38DD5873724B970E93378B9D3D02710DDE1A505B0750256D4041
960A6F260BE121BC86BDB3FAD0FD5614281E7C400CB879F57DCE47C8620F9E04
1532988A66665B85DB89629C041308B88332F00521D970DDDCE6253C763E0D70
216AA72D02079885B99C4A6EC9DBDE6F226727E35DA85B8B692471F60F36D723
76FBB59FD143F405DF154BEFC61E6D3D4E9DA3C9684B5A0AF0E5428EF3B3A4> |-
/g400 <1C60D8A8C9B7347873EC11B675AA6F6B461106EA2C61A0AE571750A08
2679294B529694EFA74202690239BCD02BDE93B33BD8DE0F0F0056B04093EE6C
4E83D6F00E22E61E0A53509E628E3614EF2EF2CA3A8502F22A560E46ED3E4AED
0BFD271CCE464114B6332D17C4A046EF74FFF1283283A642C8C06B85A0D72357
B5665CD862A8E3D30EFFEE242F88B9C12DF917A74252DB462B49970474974786
9638F8FD8E70AF4405F95B11DFD154B7101933A31068AA1E65CC021277CCB9EC
0EAA7B978A081D1A4252A6693984AAF2CEC4413666DCF8B310A71A67C6E7B1DB
954E186EA16C83551DD0516966C156876A3DE36ED7253FFBBC1504668DC98301
370300A04E6753189718288CD7EF0ED409765A888272FDB25977C8A74BC113E1
88B3DF6A69F7851A7E60496291AA0B15532572787EAC7F32F09F1E72589E0E74
E0349313472D872E64E7DB78BAB05598FE04B70E52D818F2F7B0B56A56882993
52E62F16B011595A7D7701FD641BB2FCFCADB2E33263B8A208C4183E753AD5C2
5861BF542F2009EA70BB7A67B3BE61085D37469DCDCB97CB2B41A0E2B4DB3BE6
7C2BA9A1482E51611AB708AAB8BC978B06758006F3287DD3A3CABA09A9F59A21
B0D386F88> |-
/g272 <1C60D8A8C9B714A578818061920CBD3BB0F0FEC7EB28869C0269DBFC0
2625554E339FA8F23FF202BF6BBA51F73386176CF41E41162B391BD65C46864E
1EDBE38C4A175836382F89D1B282918F37F6A98A1C310371E84DC05CA4D214BB
F40D0904F28663CAA2B1AF41B75D4680E3731D792C10C395648F8CE6283B6D2E
A4EA25EB0077385CC26E37C0D4F9F091C8BC196661820383DC1CFC26D318A92B
1398AE8D24532A475AF0A93A6DC660BFF9F07C9678F9C3412071B0DAC612FC7D
6B5FAE3214E7C7AB18E3145411FCE0CA8B75D2C8C25C05252A375257E1693A2B
9D11EE377C95BA1746CBCD896C9D8284A96EC1B8BEF12D6460B6828EC26350E9
1CC593B47372BD95FFBF8C2322BFC435A5494ED398AAAE3E6E4293369CDCFAC0
1478225F7C60BA6A2722907E6FF92F4B9457F52836FAB37F27C55593B43AB457
EA291D6DE23> |-
/g410 <1C60D8A8C9B81D89610FFBFD2F87712D18AB3F2201A6640C86A2CD8B5
33C9E9613B748962BD3321D998A13FF4A410946A55D4AE3CDBD806BF0BBD38F8
435DE762245288A30426FF012946D0E2E36D4EBD7E81C44D06926164FB6F91AA
67EEAF9AC4BC77C470E117D4634F7F90C1771292F30769DD575DD5B3F0D10473
0DECDCF41E7D59747B6A2D0EF143B06FA6BBA4F9E744BD6E4827C627C6619571
4151061BE64BA6B45A36E91B80557E1CF613697CA2B60F02790B7CBE3BBB5ABE
C190F88D2844D8139B7D141D834706D11BA3108576C531B823977B908AC9FF80
DF322060C351BA43A8EA770319D1AF8085E209B940EDEE1B85419EF87F01EED1
C4E0307B2BC95989AC0998A9EA8A0DFB99539E7D0B836F4EB9E9D6147AFB5508
2A1E63F64D57A8E7F63465BA308FA03AEB2787221627AF8F99523DB260C> |-
/g396 <1C60D8A8C9B80F37F21112BA81A46E1A1A16E843530DEF66F6901DB9A
722A358478F1B0799F6041BFFF7D05EE602307D474F1DB84BF73C4EC1FF13A4D
2D5B370042C9A314A700782F944BCE36786AFBD72FA62259FABABA90F1F2BE00
8B7993D5E1813324C60BD953524A1040FB1A790007846FA5DED6ACE6C7D436FF
1C0B97E4BBDDDA28F066E204B37F8321753E1473DDD8EE76C12A0011B04832F5
C47D3FF30EE31FE70EF82623D628622FAE52A70984ACD43F9718BC02CE5AA3F5
832FAB343FD6D53F2375C811D54E6B415E257D8BB3A2542930D7E0D6DF96FAA0
688822B6655966904164F87FA904C272BFAD51FAFF11CA14EBB5F6472235CA20
889D111211CF90F83807D99EF12B3B6827C1CA4720D03729BEEEA22A1313C4BD
CE878453F5E6DCAD449D1F3B7D54D32C49DA0> |-
/g437 <1C60D8A8C9B78E05EAA3CFED1A062DA00ACB6556B6D2C444D52FE211D
C3688D13631F07F87D2F0851361DDE2CB13BAE303424A55D9BD107D56D223228
18FC76F125ECA1DADD7E1E8164E2DF3A65B67CFAE338C319FC7D07BDCC1CF896
B708E125021996E87E6805D1416B537CED172F9478027FB9FD1A978C49E72596
8E2F5FFC6B56799F9B1D16FFE2085471316923AC7BFBC4E3BBEBA71950AD60EA
A4BEA84B8EB89079B6BEAD01C4E2BC5BF11F5FD2CB41D465D8AD649D765F2A95
2E22AC4EF1DF8297E4E5405180477A9E4F70BB10D787681535F61379438A6888
E4F660E2B1CD68547F69ECDD808A3CD50B9FBBDA239A40EE62332FADD878CD5F
875BAC27E0BDDA94455E030928A249A166F13D134EF255F5783> |-
/g286 <1C60D8A8C9B7A9C0DC897A849B356D31E2254DD2E5BDA9320580C3E08
39C715C00D9D27B634D4BEEF0FE1F6AD3CCFBCCE9FDE38A84A563FB744619F62
FCBF09ACBF7337FE050BE068BCA744FAC4471C4195B7CEC353B3CAECCCEC91AA
E22E8955469041D97A8837F9398CE520ABB35C688EEF4229957FD92C79439BF9
9D24AD4D8B3CAC5B975D966AB01856E8FAEAE3BEB03E1CC76DF299391134BFB0
2DD61F6D73B2AAAA0D725ABCA9FE504FB3A1EC1E2449C5D921F0DE45A9278013
CF0832F39E3771D2B318D27AFF5849066ED5A64AA8E3E404B520DE5F08BE74DD
8D58BD1B0FA461EBCBB4DC632B680CFAE62B61DD4FC04FC017D59147CB2E0FBE
AAFA402B5BFBD0C4F13F4BD9227D1353527A23B3EF7CA3E7F599CB51DDAF43A5
67478E4C81011D9D8D5DAD9CB1F948F5FCE67> |-
/g381 <1C60D8A8C9B78C66ECF3075BCC0F7D87F2E9EA9E473D66D53E6D1735C
12EAC0562A2F6FB428E7F7051A3A7B2D4CA6ED90F77808579359B7E539B5388F
6F54555E1422B5F329989100C1CD5239E87FECD85E14E914ADC27391A1F5624B
31EE69A68B9016D73D6A01A100E004523AC53318A2FC2260E74BA80D4ABD1433
EC67800CC9F77763DCF8156EA5CA478ABF1FAF7864EAD55939BE7FA4A9E8660C
E98DDE8CBC35F3FFF4E5C2DA4A292CE30D82057E70A8562AFB17C90FC331A4C4
6B48C7BBCED55DB7F94D559D534C59FF211B5A85F0207876BD8D6B2C7BBBC069
64A16F72BBAE841F001B71209E6C81DC64817ADE625E8FF> |-
/g296 <1C60D8A8C9B83BB8632FB1D3D91BD66E5512F6DD2CCB59074315803E2
F430B096626F50C9126DF15B1D22935F28B97AB5D3B7DB8B1B8EC17F9868DFC8
B9BA6A909CA8727D3C9D8FCF13C3B6D5F4F33EA07DFD158F20416D4C6EEC8FD3
EF14FC86346A94355FA1C2B6FA55C0124FFA9705858D4628EE39DA0E3A156A38
6DF00613D8189EFFC0AEADC5BE3915D9C022BA6356303A46539775608C62B3D2
4CB372AF4E663162E7C4ACC81D2F2C5F206BB702A5D73C1A974C0BFD7875757B
79AA73010AE51501D97B980E0F2ACE1EF1ED3F60A9C6E02B8D29057E3D98A685
00306E46C9A2B914F56A55773A150BF63B33B5E351FC714462135973FE682DBC
BC0C1B38B7A71A2F4C684D75344384C54C140B13A70313E2F4EDF68E127B4C55
F26525A530E7BB82AEC944EFDC27B6BB93FA6C499E5069AA3B6387EF0576DB7B
6BEE15BB0B269E8ACB562> |-
/g374 <1C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55
CF4C30D8A20FB7C70B167834EB1FCB2A451DA55CBA774B9C40CA48F3B7AD8E41
B3F0C2665E2AF85619561E070ABE3E4EFEC9983825210D2A0599E48D162F3133
7982CE0D843D2D41F1F7924A343E37439CC75937984C88A0080C28B8BFBFB8F4
44AFA11CBAA4BCF4C8D3087770F88F26B0A8B30E46AE29C6BF9720949C50E19D
6248BB58DE961D63651843F9B3B8EE9AA75CDE28D1F95D7703116FE7AA23945B
5808B97F9947888D114BE2523F872057145410E975A2CA83D430B49A7CAE2661
9012C2444BEBF6DC1397EFC38FADD0435CE6D4A1478744BC983827B31CF502C4
487AF1E48BBC2EB6153C1C5367B96A212BCD3FEE3B9DEC12C4E> |-
/g367 <1C60D8A8C9B887F0644B8EDF7E394B2B17D648B60040EB6DBE2B8847C
EEB752ACB6F5AD37E1FA4A050E94786AD18088ED8DC4464B0DE1BE6F00A802A6
1F4A34EAA84659717045B37042963C71284B8AC29AE9E0F8305F213AE4489E2D
B55EC12AFE94E44F64596D135D1BEB997D5B9A0BB5A35AE0E0CE05B7B1F89372
9319FB81429> |-
/g373 <1C60D8A8C9B6D24F7D3842850F4949AEB6B9100F2B78F4C8889450CED
823786FEB32A1B63E88AD56EE02413123CB64791A93EF92133FE4595DA2691E3
035F9F72C6031AE554C5E100D6D83A5170AEAC660F3CD2D2E423C32E393EEDCE
69B38CE6373F6B6777FFB71A30474298882FF21A6474EA00B23874CB701D4949
FDAB683EF52B401CF01FBFB5320858391C36D1B0A5131B6AD88B31FBA5AF7369
B538683192205F94F973772FC0D1A80750F5CA55E65F4A8760D9FFB5A3E462EB
76AF894987A3AB123C31C6F61A2DE381C11A73194BB9FA663DEB4E0E047953FD
CCB40254C512459EA81EABD29705BEDA8917220B4CD736962EC932D0F91B2A5D
C808623631D3854D7B6297589945BF94293721596CC4C62C71F5A8040654672D
59A8C73FC39F2C6919502A1FD8EB49A6BB72701DD42520B2F6CD223AC11A22A5
CED8614ABBE01C624D0AED39BB3AE4E8B513F61C37C6BA440280E139545B39C8
7A06867746DDC81F39BACA8E048A7276011988ACE081223D841AEA6DE2418F28
BD59A30A454BE8DAE3786DDCC7D1BEEFB13E445F279EE7EA8CB61C194C9B2549
7E6925AF3BEE4F64F897F4A57BD4C4A1E06EBC8223C35049061> |-
/g282 <1C60D8A8C9B78E05EAA3CECCCC7ABA6A35E55F211820F669BFFF2D107
F3F003F84456D947B5557966A2009812B81B51372EB70EB729C8C82B63A473DB
5161C83385AAD04B71C9D388B2F86E7C2E91E06E59E76C532F8A600B530589A2
18BCA1E889366120C885033631C7850C65A7F9274D24F9BF6FA89E174B53B0E1
A2CF6D783F32D4C0BE4ACD3EEAF66A8BEC8DB7AC7ADBF3C9CDF5485D002662D3
10ACCD320AD0234A2F2251E7C0B1667BFFC7E10EE40C7CB623518E3E168137CE
699E133B767C86E16CACCA64A58BD9D7F6E66BED6D6FE5D80E0381141549FFB2
FBF94ECD2D262EB097909F9092B71E3573FC9B4FD273505C685B327AE9095A2A
15545986A397AE2796BDB3888D16AF3DD82BF32621BC8C1393814540227FC926
F77872F2FAF5DD33717EB461ACFE3EE5C279294EBB5AADC09C8B10C3F2CB25CC
D97C6> |-
/g271 <1C60D8A8C9B78E05EA9D9733F4614DDE4F3CCBD772458631C06B9585C
EC3067196C085285D4EBCA830523DBA980A7903E7CCB9545952E933EA287D309
5500A08B5FF1250FB2472C48AA643F9948B713834174A32233FFD00CE8E2A02C
D92CD0EB36D86747ABA3C4EE4A7096B26460185FCF827CE5E1862348B87101A5
C9D384541120A40C8C71F0748956E48EF5E095EAD17FBE5B28249366E6BEAFC2
98EE015C31B731D6166501448A2851B390CD5E1032DCB65F726222BA5085B034
CFC917DC36E2C73558D1FCD108B1B305D16C97136B39697A594C46D2F068CC61
EBC8B61EEBACA2E9B9971F359DB93A6910B3669C04870AE086A03B453BCE1E9F
2C924C2B94631466A458EB1B3FD708C18C058A8B05845E2D231DD130E2BCA4DC
E6CA2C90256ED106A2B8A867758EB2E1D464AB1AA657324F30AFED658994E772
592420FD616D7BD6885B5350E3F2A59010B037CCEDD5B3D83A476690BED59BBD
82DD2D74F> |-
/g455 <1C60D8A8C9B776A06C625D9575F6DBFFEE93EC1CB9A335325BD9E3654
28EEA1BD5B7A305D96437BF24D2E59BF0DFE2360EDCA01120D4DA769624265DE
9866EA970971BD84B20E81D769B1F13D7A21674FB5E8C4844518680BB1DE710B
7438090302965C932285C6A137B1923CFCED74D1C71B686BDF1263BE348B2F06
F534EDA8A2856376F820F03A76FD878686946B3B179B9CD823AA55541A535E0C
CC6D2D21B3D6A73597DDD43BBEFD829B55A26664F2F8221FA6814449CF6D0CFA
13492A2A7CF82E9D18F6E0413> |-
/g449 <1C60D8A8C9B63EE6FBAC6FE430D4C472A6935E9E4E2C9D9C4ACB16C71
B032F18FE575C6256D49A59D28FA55A64B8F4250FF7EF0F6440082EA55E50C72
515DB779850B563F18307F56C5AA0381D53908E3AA5F7BCF9144924A2084F07E
BED39B22484214EF3445C58E2A31D32B14DA61C85069056233A7D69EDE7D6EAE
9095E582A487ACDCAAEC9B696D9F56177DFCBED54097D97E802545B35B3AFF09
3952061133C2164E4C99E14CC43C1C5FB57627E18AF07CB58B73BD1200A30349
006897A1314704F9560B7EE765A767050BD02ED4C3CB6891E5FA019219CAF931
0B124D9AF8C5E5547F89705BF1E11BA18C8C6F80D46BFB4F08BBC66AE29B2E81
702937C5AB98472DEAC74C8794C288DBFA220B7F896E2B36F9ECF06883A45930
B940AFF017D9F3C209761AB734C6F3F199505CD5974FFC0917AC4E2B317FA151
46D5F8C2D8B2A0366984D71D35A1EAF824F2AB69DDEEC3EC469FA5796A63F524
D8EC40E97981C19E148BD51BA03455ACA08443ED8962BD3AB9091> |-
/g361 <1C60D8A8C9B87DE052CBE8EA1F435A396D74A156D684A1B719256AFD0
88DE495AA86AB7CCD817A938296CF0F8399FCEE3662F575F22BC642EE0CBF88C
C1CA4E7C552C32B03DACABF153EC87432328A1B586B939F59CFDC9731F30AA1A
68DB84B1EFDC126626FAA4641C6597CC22073BC4D69999C5D6D474DD6908804D
1544FDE037D86AE8A6C3A9927A20091D90229324CDD9FA2941F8BE3C5B43DD92
9A06AA1AD6E0B73E9E2E606C9A69DE2B4F2C6A9FE4A4F1F9F102378426C65CF9
93658CBD59E49F9CFE61F443718943CF94BE0B4F9059A84581CE3CF237B07690
1A78460D8D22ECAD343A9B673E5DB1B8CDBC20B31ADB6632AE6BB266CC352037
837A50F2914B3EF21D046A7AF8296D6E8210A2059C31E> |-
/g854 <1C60D8A8C9B85EE3AA09F13AFE1EA1D5487D04185C635E2F65BD02BB7
DF22BBFE5051B7512FEE106F66F66184353AFCBEED1CB5314B7B80F3E52B2695
4A6CFEC4A802D718865FBD1339BE6AD949F7F886C41CCF2B4B54575279543A18
0F06A1CDE595E8DAED7162EF75EED02C4368BFD960D814A5603A0093EE2ABF2B
8EFB7E11811E50C2969531DAB70F17311B426F5530D8401842A3F51AA814021E
774EB15F80343BBA703FABDF742D949ED1513FC73A04A8DDFDB7397014D64C78
FFEA487C84AE7C1E393E7670813677FCCA9D735DDBA8AB450526289377056281
C58AE7C6298BE8116D4CD582B19703A183D2360AE71A70F83778E9AAB8502093
7D27888F0FC82444E4B67529675E1B2F5FA01AD57F19807F91B1E12CC> |-
/g4 <1C60D8A8C9B7F88C2B6CB105045FB5B2B32CEE3D567021E87FFA3A108F2
2F0AD769D89AF310F9FA2A63D83B348F1CD4D9158D831C2637A040F2E3D2AD1E
0C1265C252DE42DC685024335218B88110082607887337A49D14691BEEC919D9
1764E7A708708CD55D39F5C43F91BAAAD2C1BF631413626FEAC47C21B08151BE
A5901545C7204664D0C76E7A812FB56764BAC701D80F5CBA63A3746A10BE794C
CB8FEAE9714EDA1C180ECED7E77C8C4917875CE0D099349356F25861C18102A3
08F1467786491B4C86DDD6D90CF5B29B935592B1FC4BC1C> |-
/g393 <1C60D8A8C9B78E05EA9D973060387C73D1F6FC5283CF49F42B90E3572
2532C0305E99FC2B2F5E8253F0317294CB5BA6F51657EA79E1841CF363B43BBE
54B9E5F683986378119A60103220843BA6B4E1CF012F4407937B0EDEEE409EED
971ED71424C1DE9F58B3C06F2342302220C155C0C840BFB4693FFF8A2CFEEF27
4FFE1F4AFBE9757FB2568EE33B9D585CBE0600A7110E1A53D85847EA919EFD9B
F18F44D7EE9518AE64D9DFE7C7267D6429C8F5FD0EF0AF9ABA737132F4E330A3
30877D5AECA1F6DF97EC1ACF219E33EDD988EC9A670EC23A43243C991A099EEE
9430EF67488C01ED11E3C4B1CEB11239FEDA600217AC3F2A3708004F1E2E90E2
96730C207690B19E7D8BB6E1920E2F46C4C2E0CC81AE0ED43696970A1FBC9D40
9BB55BDECDE83A356A07B210C4055759107919A9C98A0B1493E8E6816D87FE47
A8C1A70E30E74BD97D6D39D9D984A0D52D9B81565B3C3A0B773497C465883E30
95964CC84> |-
/g882 <1C60D8A8C9B83844CBABF75256C23589A050D2F18EC6AAEA2DCAA879D
629F0698E85A7558DC3794B984219238EC694626573D368F005AA7EB3DEDB55C
E7021DF056336AEE3D77182F0055C3CB6954365C7523BFC42E70B7DCDE95A> |-
/g454 <1C60D8A8C9B76A0D39202D65B3E28787C1CC43B503732F31391DBCE57
2A2CA2079F64BC5B594607AA87D000626A2545C2F92C4488974BEE02BFDB5EF8
46BF92A6767B071A1575D7917AC4A860992133465690B1A7D35F13489CCB65C6
8A551A50F7D5FE7268F974AE88AF02F0676DC68E49F56F9749803892469EB313
C816FA79F4E722677598E3E97FE77F7E623BDC63C2F2C92A6A872F78617F1E4F
886E2D0FE3546DBCDFFFA5E4DDD143D076BF94A42BE3EB61D005FC9D628F696E
707AC2730FB246E5D69586A7207A5C66CA927382E61516706448C9FC049414B9
7AFACB4BF470D99F74F500BB6FED6F03C0B03924527D6EBE063E7443300BBFAE
73D541C5D7B5CED7E3DA24F8B93E2A8ABB9> |-
/g346 <1C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55
CF4C30D8A20FB7C70B167834EB7C5767A7762DBDEADBE99BB9DD1507EDF7CB5B
44CFB5AE7F50CE798A09AFFC2F8A1E21C8BA96A3248C2464366A8BF234A7465B
A6B08C9AB7474ED94583744D778660448C601BC1D9C2E8788B65F173F45C272B
BE3CD6AC55E870CEE94D478E3D51C8A2E608A02982A9D048914B7569407A83B9
D3CDA9FE7ECB2AF4F7816F117CC85330A774976280DEB1A8C317A8A170186F61
B3F5FC1D130A0DA1A6A5AE24C0FB08191CD76F47EDEDB0EAC8DE369D515B3B14
661497F94A2412A37D63D31ABC4AE50DD37B3DDB58CFDBCD2A17246A6058BA85
E12DAD2711083774A128264C809F70CFC31D164703798D4642E5D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XURILG+TTE22082D8t00 /WGJAAA+TTE22082D8t00 findfont ct_VMDictPut
/XURILG+TTE22082D8t00*1 
[/.notdef /g3 /g38 /g349 /g336 /g856 /g1005 /g894 
/g258 /g895 /g17 /g400 /g272 /g410 /g396 /g437 
/g286 /g381 /g296 /g374 /g367 /g373 /g282 /g271 
/g455 /g449 /g361 /g854 /g4 /g393 /g882 /g454 
/g346 223{/.notdef}rp]
XURILG+TTE22082D8t00 nf
XURILG+TTE22082D8t00*1 [10.3575 0 0 -10.3772 0 0 ]msf
497.64 182.764 mo
(\001)sh
110.519 201.964 mo
(\002\003\004\005\001\006\005\001\001\007\010\011\001\012\010\013\003\014\001\013\015\016\017\014\015\017\016\020\001\021\022\001\010\001\013\003\023\004\024\020\001\013\020\004\025\020\023\015\001\020\023)
[4.79509 2.39493 4.92299 2.51541 3.71918 5.28171 2.63542 3.83919 3.71919 3.1176 5.03999 3.11763 
3.71918 5.64063 4.91998 4.07887 2.39494 4.44156 3.71918 3.95888 3.60046 3.60378 5.51588 4.20157 
3.60046 5.39587 3.60379 5.16454 3.71919 5.39635 3.2381 3.71919 5.15999 3.71919 4.07889 2.27495 
5.51585 4.80298 2.39496 5.16455 3.71918 4.07892 5.16455 4.80298 8.28171 5.16455 5.39584 3.60049 
3.83917 5.16455 0 ]xsh
326.999 201.964 mo
(\014\024\021\013\020\026\001\027\030\001\015\031\021\001\010\026\032\010\014\020\023\015\001\014\021\023\015\021\017\016\013\033\001\001\007\027\011\001\034\001)
[4.32156 2.39496 5.39633 4.07889 5.16458 5.51584 3.71921 5.39584 4.68378 3.71918 3.60046 7.32156 
5.51636 3.71918 5.04001 5.40088 2.51227 4.91995 4.32156 5.16455 5.39587 3.60046 3.71921 4.44156 
5.39633 5.51584 3.4805 5.39633 5.39587 3.60376 4.07892 2.7644 3.83917 3.71921 3.11761 5.39584 
3.35764 3.71927 6.00391 0 ]xsh
110.519 214.684 mo
(\035\021\016\015\003\021\023\001\021\022\001\014\016\021\013\013\036\013\020\014\015\003\021\023\001\016\020\004\003\021\023\001\020\037\015\016\010\014\015\020\026\005\001\002\021\017\016\001\016\020\004)
[5.39587 5.39635 3.60378 3.48046 2.39493 5.39635 5.39587 4.43919 5.39635 3.35809 4.19919 4.32156 
3.72379 5.39635 4.07887 4.07889 3.11839 4.07889 5.16455 4.32158 3.48045 2.39494 5.39635 5.51588 
4.3192 3.72375 5.16457 4.80298 2.39493 5.39636 5.39587 4.31918 5.16455 4.43889 3.48047 3.60379 
5.03998 4.32156 3.4805 5.28455 5.39584 2.51541 4.31915 4.79507 5.51636 5.39584 3.60379 4.19919 
3.72379 5.16455 0 ]xsh
333.839 214.684 mo
(\003\021\023\013\001\015\021\001\031 \003\014 \001\015 \020\001\035\021\003\023\015\013\001)
[2.51495 5.39633 5.39587 4.07889 4.31918 3.48047 5.51636 4.31915 7.44159 5.39584 2.39493 4.32159 
5.39584 4.31918 3.48047 5.39587 5.28455 4.31921 5.39584 5.39636 2.39493 5.39587 3.48047 4.19888 
0 ]xsh
gsave
454.56 212.524 mo
500.88 212.524 li
500.88 219.364 li
454.56 219.364 li
cp
clp
%ADOBeginSubsetFont: ONKBAA+Times-Roman Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /ONKBAA+Times-Roman def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development; Cyrillic glyphs added by Valek Filippov (C) 2001-2002; Numero, infinity and Omega made by Dmitry 40in (C) 2001) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
def
/UniqueID 5020931 def
/FontBBox {0 -218 775 683} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 450 470 662 682] def
/StdHW [30] def
/StdVW [85] def
/StemSnapH [30 38] def
/StemSnapV [85 103] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/zero <1C60D8A8C9B7A73D33BD7C9339964DD07C87D05AB7B25A68144D7948D
5D72AF545A4D3C0513F795E10E78346C3F1E06A3A564CAE7C700C7FDC9B087C8
E6354649236E324B711B953A69EB07058EA7506E73C4971A2CD8E7B56CC9E4E9
FEA40EB905B2E375D63C0419CF10FC6C14A0C10D77A69> |-
/one <1C60D8A8C9B7A73DC5490245C8C7708C9C1A86CF69CA79CAAB63EAA648
EA2E6C78033E5C58FDA70BC8454AA911A757A9E5E1438DF9CC83414C3826EDA2
E8DBF29FCDC2AA63CD78AFFC717ED254D55F2212> |-
/two <1C60D8A8C9B7A73DC5046156A965F0B3A5C5C92B949F09859351B744F8
D4F54DF812628245A65EF24CEAADD5DE190FFD56148C6E385D5491D13046F140
F2584C73B6FA05C320B018358B9C23ED6C9E586FC4F73E174BDB9E859FD3482F
BC3EE225AB5583DDBB> |-
/three <1C60D8A8C9B7A73DB6464B30656D3130691DF7EFD1FCAA812FB718AE
797868078CE6DF2DF1E2A66ED4BF5348B6C69083E458153AE071004D8F2BF947
6082ED69D4C391407465B1B45C31A02715A00C98BC5B726516258E8947B375AC
1D99C71671CE1B20010EB708F68C157CA780D8CEDD82E4EFEA36957D1E9D620F
21062F862D959015173AB7F66F545DC094D5CD0481B86047A6A1B0DDD60A5F4A
F425FC6CC8FF071AFB500BB581> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XURILH+Times-Roman /ONKBAA+Times-Roman findfont ct_VMDictPut
/XURILH+Times-Roman*1 
[48{/.notdef}rp /zero /one /two /three 204{/.notdef}rp]
XURILH+Times-Roman nf
XURILH+Times-Roman*1 [6.00096 0 0 -6.01224 0 0 ]msf
454.56 217.924 mo
(0123)
[12.36 12.48 12.84 0 ]xsh
grestore
gsave
458.4 206.044 mo
500.88 206.044 li
500.88 217.804 li
458.4 217.804 li
cp
clp
%ADOBeginSubsetFont: ONKBAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILH+Times-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B8707CF500A7A5894D1725992EFBC166CFF23147B7E69F
A1C74D97FCC273949B74B78FD40D5AC4A1B125071E6B26B97A4F1E4CC9C60D79
492C> |-
/bracketright <1C60D8A8C9B81F2C36B2094B9ED0E07AB0AE245978D415C9B
35A8D321C0AFE31914517F88ADB7E422E89E84FA69E241776020CB3FEA2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILH+Times-Roman /Encoding get
dup 44 /comma put
dup 93 /bracketright put
pop
%ADOEndSubsetFont
/XURILH+Times-Roman*1 
[44{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two /three 41{/.notdef}rp 
/bracketright 162{/.notdef}rp]
XURILH+Times-Roman nf
XURILH+Times-Roman*1 [10.38 0 0 -10.3997 0 0 ]msf
458.4 215.284 mo
(,,,])
[11.88 12.96 12.84 0 ]xsh
grestore
gsave
445.92 205.804 mo
500.88 205.804 li
500.88 217.564 li
445.92 217.564 li
cp
clp
%ADOBeginSubsetFont: XOSAAA+Times-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /XOSAAA+Times-Bold def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development; Cyrillic glyphs added by Valek Filippov (C) 2001-2002) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 91 /bracketleft put
dup 120 /x put
def
/UniqueID 5020933 def
/FontBBox {0 -206 707 694} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 461 481 676 696] def
/StdHW [33] def
/StdVW [140] def
/StemSnapH [33 66] def
/StemSnapV [140 163] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/bracketleft <1C60D8A8C9B81F2C36ABA40F23B341A8D4E5C41B7F6EB1B48F
C30036016D670837D67D4373CF402217606DB0C42113C7120BD646CAAA> |-
/x <1C60D8A8C9B7A73DC5707768E51CEEE39C2083436A8B9AD0821E5ABCBCB1
954AC68BC977C58E71CAF328C6028451D39A4AA8594E4742973D667A4F824158
66154DCE1BDDCFBA5035BC89386301EECB184ED17D1B27AC679834B91AC98B9B
018E2DA0E15EAC22C5C46C1A1EFA0E29080955DBFA9FBA7E4F14FA8E014CE88F
048A9ACD918FE8F67E41F121E50201FB3D5438A85B6A52193B5AAC47F583FC12
0EC8153DCA45A6985A2E2AC889453FFCE4B0A73E0D94F70263> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XURILI+Times-Bold /XOSAAA+Times-Bold findfont ct_VMDictPut
/XURILI+Times-Bold*1 
[91{/.notdef}rp /bracketleft 28{/.notdef}rp /x 135{/.notdef}rp]
XURILI+Times-Bold nf
XURILI+Times-Bold*1 [10.38 0 0 -10.3997 0 0 ]msf
445.92 215.284 mo
([xxxx)
[3.23993 12.9601 11.88 13.08 0 ]xsh
grestore
XURILG+TTE22082D8t00*1 [10.3575 0 0 -10.3772 0 0 ]msf
500.88 214.684 mo
(\001)sh
110.52 230.164 mo
(\027\020\024\021\023\004\013\001\030\003\020\024\026\001\026\003\022\022\020\016\020\023\015\001\026\003\013\015\010\023\014\020\001\014\010\024\014\017\024\010\015\003\021\023\013\005\001\001)
[5.39587 5.16457 2.39494 5.39634 5.39587 4.92299 4.07887 2.27921 4.68375 2.39494 5.16457 2.39494 
5.39587 2.27919 5.39587 2.27495 3.2381 3.1181 5.16454 3.60379 5.28455 5.39589 3.48045 2.27921 
5.39587 2.39493 3.95889 3.60045 5.03998 5.39587 4.32156 5.16455 2.3992 4.20157 5.03998 2.39494 
4.32156 5.39587 2.39493 4.91998 3.48047 2.39496 5.39633 5.39587 4.07886 2.7554 2.27921 0 
]xsh
301.56 232.084 mo
(\001\001\001)
[2.3992 2.3992 0 ]xsh
%ADOBeginSubsetFont: NKWBAA+TTE25798A0t00 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /NKWBAA+TTE25798A0t00 def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g3 put
dup 2 /g94 put
dup 3 /g410 put
dup 4 /g286 put
dup 5 /g393 put
dup 6 /g1005 put
dup 7 /g855 put
def
/FontBBox {-493 -194 1239 952} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC6CDCA18E09BCC917FA5F1
19478AAC0A696931453BF661861F40ACE8D15EA0278E8F88478BB0248E8D1904
2FB8B7F2BB2D4ECFE961B3EEB80565197E481D427DFF375EC95F16C0E36FE28A
EC2A0702F6CB5ACA5B242B6593847C74B58C6FBE25BCF0D4AFF25D49578CAB0D
929B025DECF86FE8C45E91FC3804785896842CEEC7085BA98EF5BCC94B208BF4
3A5FA51448171853E476E618A0AB76D0CDCEE51B8CF3FCD6DA051824D7EFC40D
8D270BAD39624CE3E5CBFE64B165BA24EF48FCEC82F8DEB8BFCD829A07FF03FF
E381E622BF0967DB53309A79D2F393F52C4B535EC59CAFAAC152061A92D31A3A
6E83C18D63056F4453027EAA702C494809677EB8C59BD219046DE492EABC7DF1
9D085C93C98D2A8DDC68AF0F5D7D82447ED6165A8DE95E6965A0F15A3F7696EA
E508CE290FD5B2FFA8A49A20B157645C3C3FEFBC64E2B40E75B90474094AF159
9689FA1EAB0D131F6DB991FC0D5943DE54CA9E5ECDA986A63CDF0394AF79DB39
8CE8AC4F02FDBD88EE6AE535CFB6C3B33C157AAFFBEC52BA3DACE77ABDA0C787
220FBA75DA1E45C945> |-
/g3 <1C60D8A8C9B888C146> |-
/g94 <1C60D8A8C9B742B2428B22C58173B85783D75A797DBCB372A0CB326482
474FAB61F063E0140601EC7FF01420397E5BDA67D4F9EDAE8E10230A79EC92A8
830D2282FCE48C14D6255C2ED38A9227193C8E6C63D4DDC56C1677AD4EE7A081
BF7E8A0FF7039F31DB9E38AA3D9C2EB519583088084AA15E2BB9360A4E499CAC
66644008970F6456622973EBC19ABE9CB7A2E2E1E436FF7CFF17A456DD4F34C9
425E8B0FD7DE46D10D79C35ECAF346DB73750038187DFDA7C08FA4F48F7113F6
3AFD0A79F7B60ED56D2ECBD0518AE5F6486AECEBC538DAAA88840DE9FD61A7C5
CE810708E5D83B5B7C944D9C1E933328832CB2C1C15FF59A769DC54012A003CD
2D939547D59BB8CA0EDD6EE29AE032391BAF39F38DA1EDFC771E0FCA4EC6DCF9
52E839737B2539E516D209F792B48305C6FAB4D747AEC9E9C287FF4145435610
A8CE0D829239E17AD471B7D50F49EAEE2D4789B01FCDAE85BE94E4A248F07281
7ADE20C93B792AF7C1262529AB3872BFC67D038B73B9815822C383A389406399
18361A4A73948EE1A93B0DB78FD9D96349705DBB9BAADC27C924FF385CADAA15
DB528408E800871EF0C31C6F3F452B977A4424498006B5AFF12D057DDA48B358
2FED5A4C> |-
/g410 <1C60D8A8C9B811DA5D4543EFE763FE07FB96B6C57E1041B720B123957
55AD170E1C95BCAF4A2E07F08B3527B85FB4B749D3F56190F68B968E525451C3
AE3228733358D3B0A4C671159FB2D66F4623773F95AB53B6E5F82C4D1162EF1F
1D4E57FDA1EEF70327DBE4F94D4CA953DA49B009A6CE451FDF5FD819F6892B65
7B7073F3DB90026C98348CDA83213F5FE3803287637443B9875961ADEC93A662
F367D30B1D64FEC94C3B7D13A776301EC9C6F446E01C4556C7599D35348744BB
4C07BEDF72B7B19A9909847F0BA47C222B2E533F87C4B7AA516B5A1E0E736524
2B5879EFE81A74993AD272F8F9838C2A26DF98C12A45718CB59AC62E5107E8E3
4F27910F2367476C7C04E0E4233AFE86333074EFF0032ECDB6435F19DBFBCDB1
9D0579CF4055335373B7C3C1BD559B22725F49EA0166722B1401585> |-
/g286 <1C60D8A8C9B7A4C86C545A4AC8A7D7F6C345E834CA1213E882E926387
794826A205EEEE689D37E8FC5A261291E47A8EB37515D6AFF3E8D4C2927EEA10
BDEE7B9C51B7C7E29EC21F969487478C80B6DD492C8CB06797735DBFAA076783
5E16CF60557FF99669574049AC02AF815FE3A71EC95AE08115F25C3E55D5B1FD
10CA1E741534F0E60416081D7FA16D9DFEF57FF91FD82FC7BA4FB9689D718D9A
71DED1EF9DCA51AF0BBC79B40093EF91CBC3D8C48A3FDFEA41B5047A65EAFDD5
AF1021F9C948AAB35D583226126C585E079DEB6D479075845CECA8ED7ED10944
C11C924501DD381B71E2F7690C30AF54ADDDF92DD4099EA219A54E3CF84E276F
A7871C8A6ED23473DBBAA6EDA7BEF929816C1760D14417F454980C243ACB7FEE
E422DBAD62FF97870FD2250B1790169B64F76> |-
/g393 <1C60D8A8C9B78256DD05CEB4DA9E965AB07EBB69AB364D14F4B8A1E61
29E1A1B57A9F6AF54A3080C4C156F4713FDECBA67C18FBD4873468229BF2E56E
47555C842162EA8AFD838229FDC9DDEF310896F702CA81E89654B1920C456B61
22904925826DCCF02D5C1E273B9B70F686A52F233CB0BF53CA99DE0726AB8843
AE18A2F544EEFCCB9368EBBD2EAF30818B845E8A149610E23EA632E165F5F7A4
520EBF45E5F0A7C6C568F3780A23188579ACA934B1151F60150BE69611E3BBA1
C15169CC459A53E1BC79B4E95D0D1E38FE34738BA484CC420DDF487453BC7EA4
4E7585361232849BCEDF40AAC7FE11F5957D235AD9EDF320D6585B01D68C46BE
5D9691D1F0D2A2633C87BEE9F7062A178C86B69B109CEB96764C1C8FBD01DA9D
DE36AB596536073622CAD7E9206511E05DBC09A13A3DCE8DBA476EE29BA282BA
82967374BCFCA66C6C7134003DFF5B8CBD8A2DF42CA27C9663DE571271A8218E
1F5A8F5301D> |-
/g1005 <1C60D8A8C9B7A0860A08766484DD98ACD9B7603C3BEB562EF73D61A0
5B5DE8017F13F266C92D24BB1BFB1F10862D1ECEF20CD68A682CFB2B6B8C8D4A
CC07437E905967E49582EBFB7D7DBEE5AD89B57488088CB90B344312A00E3A76
8F1A71AA7FE928885ED762CFCBE708040927416AA164E088AD1002EB33FCE0AF
46257A3940922440C00BA7E7A7473C8156D179D16C2AD8A140315C11572410BA
2D809C47C6FEFFF5CE5397A409F885D7D48F970A3D066B0BEB8881CFFB031485
F28034B9C01B50982B8B5CF88D481078410E6E5527A96584B5B0D98325924A95
F3E8ECEF6BE4ED4F2334D96E1E4275648EF87EA38AF46A8563DFEB52852B798D
29CF4419BFAEF5> |-
/g855 <1C60D8A8C9B856778389DC0CFB4C49EECE0B2E2973E8CE69CF5BB42C0
0744B8D9F0111F9901F4E35EE9BC8E5BE9CA11BDBC0A059B55115D787D7D07EA
4AEE9A3AB1B35871658704E72456B8C365E2B7A901CBE7C9082D0A8CECACB727
90EB0C74AE7FB4E82A39CA8EF05899A5A7E5DC9B45310630852855F4432E4850
F17ADA3C1D3B530150A2874016AF77A66CBD322ECCEA99CC358A3467D4DBF5FE
0F34E0337121671041CE77E415FDF75E7B10321C04E2002A9C0C69681C428D9F
45860A1570D9C34718E2C3B9A6BEA107E20B205B320F04312C8D92C4AED52945
4AC5B558E23B3039EF0DD84AE178992121F4409538E4B> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XURILJ+TTE25798A0t00 /NKWBAA+TTE25798A0t00 findfont ct_VMDictPut
/XURILJ+TTE25798A0t00*1 
[/.notdef /g3 /g94 /g410 /g286 /g393 /g1005 /g855 
248{/.notdef}rp]
XURILJ+TTE25798A0t00 nf
XURILJ+TTE25798A0t00*1 [11.2584 0 0 -11.28 0 0 ]msf
110.52 253.324 mo
(\001)sh
110.52 276.484 mo
(\001)sh
110.52 299.404 mo
(\002\003\004\005\001\006\007)
[5.28395 3.96361 5.63535 6.12428 2.51915 5.64188 0 ]xsh
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
142.92 299.404 mo
(\001\002\003\023\026\001\015 \020\001\023\021\016\025\010\024\001\021\022\001\010\001\035\024\010\023\020\001\014\021\023\015\010\003\023\003\023\004\001\035\021\003\023\015\013\001)
[2.39914 5.27466 2.5145 5.87555 5.99553 2.63914 3.7205 5.87553 5.64497 2.51913 5.87555 5.99605 
3.96413 9.00189 5.39999 2.63449 2.51912 5.99606 3.47794 2.51913 5.39999 2.51913 5.87552 2.5145 
5.39999 5.8755 5.76498 2.51917 4.80173 5.99606 5.87549 3.72055 5.39996 2.63449 5.87552 2.63452 
5.87549 5.28326 2.63916 5.87552 5.99606 2.63449 5.87552 3.72052 4.55878 0 ]xsh
gsave
352.2 294.364 mo
357.72 294.364 li
357.72 301.324 li
352.2 301.324 li
cp
clp
XURILI+Times-Bold*1 [7.71839 0 0 -7.73292 0 0 ]msf
352.2 299.764 mo
(x)sh
grestore
%ADOBeginSubsetFont: WGJAAA+TTE22082D8t00 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILG+TTE22082D8t00 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g853 <1C60D8A8C9B8707CDC942CCCB390E2EBDECE84299C1D70B94D48EDEFC
24B81F8B75DA3F1918432B2F409095DAC0582173DC4C65D9100D9F1EF0E29589
05CA03900BBC017CC2C22078867D9B93E99C98F73B8E920E64E58EEAC1F48E6F
F3AFDD35294E3193433723D3D3D96A7A9DC268DA248D35EA485B997E6CEB982E
59BFA79BFF841543DC2846254603C28F3C8573C4B1EA3072066B804365A5C417
413B2C8DDE73D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILG+TTE22082D8t00 /Encoding get
dup 33 /g853 put
pop
%ADOEndSubsetFont
/XURILG+TTE22082D8t00*1 
[/.notdef /g3 /g38 /g349 /g336 /g856 /g1005 /g894 
/g258 /g895 /g17 /g400 /g272 /g410 /g396 /g437 
/g286 /g381 /g296 /g374 /g367 /g373 /g282 /g271 
/g455 /g449 /g361 /g854 /g4 /g393 /g882 /g454 
/g346 /g853 222{/.notdef}rp]
XURILG+TTE22082D8t00 nf
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
357.72 299.404 mo
(!\001)
[2.64551 0 ]xsh
gsave
370.68 297.124 mo
375 297.124 li
375 303.364 li
370.68 303.364 li
cp
clp
%ADOBeginSubsetFont: OOLBAA+Times-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /OOLBAA+Times-Italic def
/FontInfo 6 dict dup begin
/Notice (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development; Cyrillic glyphs added by Valek Filippov (C) 2001-2002) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 106 /j put
def
/UniqueID 5020937 def
/FontBBox {-124 -207 873 683} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 432 452 653 673] def
/StdHW [23] def
/StdVW [78] def
/StemSnapH [23 32] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/j <1C60D8A8C9B854D0F80E079EFCA2CE43D4503FD114BDE139F82107E3C677
E9329BA7106B2C1847FE56A188226304996C8CDC4C4B048CC6C709B31DD170CD
5595B24582FDA05EA76C3BAB5CC00E93913110F146AFDE248339FAA7A2A4297C
48EC8CF8CF2A6A9A1CCB08401152E1D77B40ED59D0BDA6169B5D4E0A0188941F
2945E492767CAD340FE19C5D44BE22E9CB0305D5596685943808> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XURILK+Times-Italic /OOLBAA+Times-Italic findfont ct_VMDictPut
/XURILK+Times-Italic*1 
[106{/.notdef}rp /j 149{/.notdef}rp]
XURILK+Times-Italic nf
XURILK+Times-Italic*1 [5.36628 0 0 -5.3766 0 0 ]msf
371.64 302.044 mo
(j)sh
grestore
gsave
364.32 290.284 mo
375 290.284 li
375 304.924 li
364.32 304.924 li
cp
clp
%ADOBeginSubsetFont: BMGBAA+TTE25F6AE8t00 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /BMGBAA+TTE25F6AE8t00 def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g48 put
def
/FontBBox {-20 -308 1273 907} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B5EE31F4> |-
/g48 <1C60D8A8C9B6C698DDE7ED4D23B9F40CD900F8336827D86887ED786992
511928CABE569A68B3CD632D2B5DB4C8D3A407D0D81DDA3F6620D1B0C0DBE3F0
F34EB3678B645A806714F5FFF26BDD1CFFD7848F5783B3AE81DEE23FD4091D46
D4F3D59F2DDEBF6A72E8A3B85CA98362E6DBAED2A698DC6989BC00FE639E610A
3A60D8C1215BF3A99F691974D371EB9071C5FDF3E6CF597DB3325CB40684056F
7B1C858DFF837D8B206A8AB602B8071BFF3DF52CDF1A53F9F08562EF86E2B2B8
1253009ED7FD93E1C0B3EB9C4944AC9EE922B4C52502E5A074785A1D4AFE7487
0DA45DD37A76B1E054538196EEAC0496A58F8F08E0BF50E070E5309EC76A44C0
45B8AF734133695B4E3DD7F5596FADBFA0C4FB78C3A723D9A2C1017E90C62DCC
03C6DEE160C23E92A672F0A72867568EB901F4BFFFABD7FBCEBC1A1DF781> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XURILL+TTE25F6AE8t00 /BMGBAA+TTE25F6AE8t00 findfont ct_VMDictPut
/XURILL+TTE25F6AE8t00*1 
[/.notdef /g48 254{/.notdef}rp]
XURILL+TTE25F6AE8t00 nf
XURILL+TTE25F6AE8t00*1 [9.28223 0 0 -9.3 0 0 ]msf
364.32 299.644 mo
(\001)sh
grestore
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
374.88 299.404 mo
(\001\010\023\026\001)
[2.51917 5.39999 5.99551 5.99551 0 ]xsh
gsave
411.12 297.124 mo
414.96 297.124 li
414.96 303.364 li
411.12 303.364 li
cp
clp
XURILH+Times-Roman*1 [5.36628 0 0 -5.3766 0 0 ]msf
411.12 302.044 mo
(1)sh
grestore
gsave
405.12 297.124 mo
414.96 297.124 li
414.96 303.364 li
405.12 303.364 li
cp
clp
XURILK+Times-Italic*1 [5.36628 0 0 -5.3766 0 0 ]msf
406.08 302.044 mo
(j)sh
grestore
gsave
408.24 296.524 mo
414.96 296.524 li
414.96 303.244 li
408.24 303.244 li
cp
clp
%ADOBeginSubsetFont: TEABAA+Symbol Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /TEABAA+Symbol def
/FontInfo 6 dict dup begin
/Notice (URW Software, Copyright 1997 by URW. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
def
/UniqueID 5021339 def
/FontBBox {0 -222 959 740} def
end
systemdict begin
dup /Private
9 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [673 693] def
/StdHW [0] def
/StdVW [0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/plus <1C60D8A8C9B7967688634518E0C63EDFCD231CB1631FDF629D82199BF
0CA0FE5C4AF45AF2C86567ED95C5441F8C5017E94BC569E5E5FF5> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XURILM+Symbol /TEABAA+Symbol findfont ct_VMDictPut
/XURILM+Symbol*1 
[43{/.notdef}rp /plus 212{/.notdef}rp]
XURILM+Symbol nf
XURILM+Symbol*1 [5.36628 0 0 -5.3766 0 0 ]msf
408.24 302.044 mo
(+)sh
grestore
gsave
398.76 290.284 mo
414.96 290.284 li
414.96 304.924 li
398.76 304.924 li
cp
clp
XURILL+TTE25F6AE8t00*1 [9.28223 0 0 -9.3 0 0 ]msf
398.76 299.644 mo
(\001)sh
grestore
%ADOBeginSubsetFont: WGJAAA+TTE22082D8t00 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILG+TTE22082D8t00 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g855 <1C60D8A8C9B85EE3AA09F13AFE1EA1D5487D04185C635E2F65BD02BB7
DF22BBFE5051B7512FEE106F66F66184353AFCBEED1CB5314B7B80F3E52B2695
4A6CFEC4A802D718865FBD1339BE6AD949F7F886C41CCF2B4B54575279543A18
0F06A1CDE595E8DAED7162EF75EED02C4368BFD960D814A5603A0093EE2ABF2B
8EFC6D527E7309A7D085984A9616E0355BBE99B23383E635D8345EE503BB7E7F
606D03708C2AC02168B9980286B030538C369A5588A9CD5E4A8087241AB991E4
5CC89FF12CB4C89B42B01621767D0EDD116D84098233D0CC562EF89698FB414C
FA2163D7ED0B4F71F70D57FA8F1C7830EE5D4CDF38F5B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILG+TTE22082D8t00 /Encoding get
dup 34 /g855 put
pop
%ADOEndSubsetFont
/XURILG+TTE22082D8t00*1 
[/.notdef /g3 /g38 /g349 /g336 /g856 /g1005 /g894 
/g258 /g895 /g17 /g400 /g272 /g410 /g396 /g437 
/g286 /g381 /g296 /g374 /g367 /g373 /g282 /g271 
/g455 /g449 /g361 /g854 /g4 /g393 /g882 /g454 
/g346 /g853 /g855 221{/.notdef}rp]
XURILG+TTE22082D8t00 nf
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
414.96 299.404 mo
("\001)
[3.00479 0 ]xsh
gsave
269.64 314.524 mo
273.12 314.524 li
273.12 333.364 li
269.64 333.364 li
cp
clp
%ADOBeginSubsetFont: TEABAA+Symbol AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILM+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C34CDA278A2DAC979FE7B193F144A72B24A04
A8E4BBE314AA264F7F8E713D96F12B2C722F9FE58CCF22A87435960BE762B4C1
1EA72FD069F47E245537F5A01FB19590E0525155D69B66275F593E3772D693> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILM+Symbol /Encoding get
dup 40 /parenleft put
pop
%ADOEndSubsetFont
/XURILM+Symbol*1 
[40{/.notdef}rp /parenleft 2{/.notdef}rp /plus 212{/.notdef}rp]
XURILM+Symbol nf
XURILM+Symbol*1 [11.1605 0 0 -18.06 0 0 ]msf
269.64 329.284 mo
(\()sh
grestore
gsave
302.64 314.524 mo
305.88 314.524 li
305.88 333.364 li
302.64 333.364 li
cp
clp
%ADOBeginSubsetFont: TEABAA+Symbol AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILM+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenright <1C60D8A8C9B81F2C34CDA278958F9F5DAE3BFC70350BE4456D0
10FB607F29238B8F1E7A5441D3D77BAEA8D66D5FF8CF731680EBDA695650E6B4
D8289AFB49A3DFCBC9D5F3287EF00856C4BAAE463E5D458A352C4D9EDEE07F1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILM+Symbol /Encoding get
dup 41 /parenright put
pop
%ADOEndSubsetFont
/XURILM+Symbol*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus 212{/.notdef}rp]
XURILM+Symbol nf
XURILM+Symbol*1 [11.1605 0 0 -18.06 0 0 ]msf
302.64 329.284 mo
(\))sh
grestore
gsave
314.88 314.524 mo
318.36 314.524 li
318.36 333.364 li
314.88 333.364 li
cp
clp
XURILM+Symbol*1 [11.1605 0 0 -18.06 0 0 ]msf
314.88 329.284 mo
(\()sh
grestore
gsave
354.24 314.524 mo
357.48 314.524 li
357.48 333.364 li
354.24 333.364 li
cp
clp
XURILM+Symbol*1 [11.1605 0 0 -18.06 0 0 ]msf
354.24 329.284 mo
(\))sh
grestore
XURILH+Times-Roman*1 [6.6474 0 0 -6.66 0 0 ]msf
333.84 330.964 mo
(1)sh
XURILK+Times-Italic*1 [6.6474 0 0 -6.66 0 0 ]msf
255.24 330.964 mo
(jjj)
[27.6 45.24 0 ]xsh
XURILM+Symbol*1 [6.6474 0 0 -6.66 0 0 ]msf
330.48 330.964 mo
(+)sh
gsave
261.12 316.324 mo
360.12 316.324 li
360.12 330.484 li
261.12 330.484 li
cp
clp
%ADOBeginSubsetFont: TEABAA+Symbol AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILM+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B79676F49142DE56346D1DA3B82A9483D89BD7DD> |-
/equal <1C60D8A8C9B79676F4308A6DF9135F625BB9C0F60A91EF19FD60CB60
86E5C3B836937C14557529A086AFB2> |-
/multiply <1C60D8A8C9B79676F492B9F1006C15B4A1583750E391B8AA69283
0836170E26859431AB1BC93BCBE5D4A9B491B6FA087EF80AA57D001DF287DB30
5CC697A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILM+Symbol /Encoding get
dup 45 /minus put
dup 61 /equal put
dup 180 /multiply put
pop
%ADOEndSubsetFont
/XURILM+Symbol*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /minus 15{/.notdef}rp 
/equal 118{/.notdef}rp /multiply 75{/.notdef}rp]
XURILM+Symbol nf
XURILM+Symbol*1 [11.4979 0 0 -11.52 0 0 ]msf
261.12 327.964 mo
(=-\264-)
[26.9999 19.3199 32.2799 0 ]xsh
grestore
gsave
247.2 317.404 mo
360.12 317.404 li
360.12 330.484 li
247.2 330.484 li
cp
clp
%ADOBeginSubsetFont: XOSAAA+Times-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILI+Times-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/n <1C60D8A8C9B7EF3257330F56CDBE5E6BC9CB1552505740B6EDF546B7A2F6
59060503EC81AF4588770359DD56CEA71F9E97B8F49CBFE5A626AC11107C5186
29BD014A0EC8DF9EE795013127D1DB5B5E326C3ACD80A996D3F693B6F491CB43
D819DE554F13601C467EA7F8B87FD0DFB2AD5E05307F9C245693D9ED28CF5113
30C2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILI+Times-Bold /Encoding get
dup 110 /n put
pop
%ADOEndSubsetFont
/XURILI+Times-Bold*1 
[91{/.notdef}rp /bracketleft 18{/.notdef}rp /n 9{/.notdef}rp /x 135{/.notdef}rp]
XURILI+Times-Bold nf
XURILI+Times-Bold*1 [11.4979 0 0 -11.52 0 0 ]msf
247.2 327.964 mo
(nxx)
[48.9599 51.72 0 ]xsh
grestore
XURILL+TTE25F6AE8t00*1 [11.4979 0 0 -11.52 0 0 ]msf
273.84 327.964 mo
(\001\001)
[45.12 0 ]xsh
%ADOBeginSubsetFont: WGJAAA+TTE22082D8t00 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILG+TTE22082D8t00 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g862 <1C60D8A8C9B719BD263A1AF354EC5380226ABD66C3588D7673C420660
3902C686158EAAE3EE1FD179896D204689DF1D1FF08A68E2411768E8F84B943A
800246C140705D7DAB71B09FDC07EC25206FF9E83DCE61DDD8F4E123FB60FC12
D0DB1BF237975613E80CB5BD25AB9F5DEB82B12BCB099D5E2825C445BC4A8485
C3A9B3D8BFAEF6372C53168A8C037AA4299CF6B3A2ACC438B09A532770212376
4F4619C2AF3D1855ED0C3A1FC1D390FCBE1C135FEE84A99369704984EA61985C
7F3E156921A76180EE2960068FB4F91F1203AA3272B19D31BE3064F4A7C1E997
B2E68611C1A33E24A042B6E8703E895980646B8C413E3CBFF122A3F1EB929944
0784642DECD725046B3561C0F7A9EAE20A3D9C904294621176F0302B30B55907
ABC42F137C5BED5848B81EA98E9678BB42FF478809861767BD2EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILG+TTE22082D8t00 /Encoding get
dup 35 /g862 put
pop
%ADOEndSubsetFont
/XURILG+TTE22082D8t00*1 
[/.notdef /g3 /g38 /g349 /g336 /g856 /g1005 /g894 
/g258 /g895 /g17 /g400 /g272 /g410 /g396 /g437 
/g286 /g381 /g296 /g374 /g367 /g373 /g282 /g271 
/g455 /g449 /g361 /g854 /g4 /g393 /g882 /g454 
/g346 /g853 /g855 /g862 220{/.notdef}rp]
XURILG+TTE22082D8t00 nf
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
360 328.084 mo
(\001\001\001\001\007\006\011\001)
[21.2391 33.8391 33.8391 33.8391 3.47745 5.64191 3.35742 0 ]xsh
110.52 355.924 mo
(\031 \020\016\020\001\015 \020\001\013\030\025\027\021\024\001#)
[8.04172 5.87553 5.64498 3.96411 5.64499 3.11914 3.7205 5.87553 5.76498 2.99913 4.4388 5.16412 
9.00189 5.87552 5.99606 2.63449 3.23914 0 ]xsh
gsave
203.4 349.444 mo
210.72 349.444 li
210.72 357.844 li
203.4 357.844 li
cp
clp
XURILM+Symbol*1 [9.22224 0 0 -9.24 0 0 ]msf
203.4 356.164 mo
(\264)sh
grestore
%ADOBeginSubsetFont: WGJAAA+TTE22082D8t00 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILG+TTE22082D8t00 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g863 <1C60D8A8C9B719BD2961DC40BE12F59F3590E923CFF3F4985D0E12C55
132E7BF426E65A1E85924158623BFED17955B7EB21835F0EEE82250D83DF4B36
7777642C03A1D6EAC28DBCBF8A2049E54831679A5E305C44A13B5F4C3FEDE424
B18B42E3446B0DE8151FEFE8F7A954930EA9E27EEBD1E414BEAD6E525D958F7A
1F7AFB1D4572FAF255300E9A1FE007FF85449B20F225BB728276C72BADB4AA88
FBD70AE943909BDD5237F5CA1962CEC43AF6101FA330C278E331B97A1FCECA82
5317A4BD5E5990D0252D184A5600245ED0B1395F60F577322EF5A84F2201F987
7CDC03DEE480BAD0F482CE14DDA1BE3D6EE917B2820EAAA7BC526B7B4EE479D1
581C90E4DE4778D1C5C8398F78D436FB60AD5F6C20D525210FE2268E7C8BCDB4
D4103B81253836412CF6574964073DD14E79DF03AE718EB92DC28DCA31D3B035
4> |-
/g448 <1C60D8A8C9B77771B09AD302B4CB2C18543FBB2E7E6342969838CF2C3
34035065E921A40A75882974808107F0F5C3AC1CD7A10BA6075C83F1DE48B37C
B4A8C976EF88D75006F44747CDCEE5069475B014DB29A6BE7A1F25A9ABA2642A
E0B12F169B7C26C5BB2C6831FDDDADD15DE53220C2A354D3DB65E39662BC3F52
DBE3E6F55BA2941DB48175EDD867619C5C4F72AF6BDE0336B64DD708A70A9B30
43446299A2061A5B31F71BCE056DDAEEEA357563374E361165ED57E4A9861B82
CE26F9B6BF6D6DD8B8E105752A19647DA81C937CF2BEAF032E992A09CE082764
919EAB1094210448A121FEB79BB41C951E6B43D3384AE29644009EB9FEBB553A
8B95EE31D86> |-
/g1007 <1C60D8A8C9B7A0860A2FEF09FCB80607108B3B71A30E2FFE5A0F53F1
F3CE33E25BDD9A37F12480657F287B11234D872A9341B8D761BAC5B337758ED3
4FBDB0155B2DB8FB089986F2CBFC580855A552E4E7BA3E50F802AF5BABA1A72C
62BC1E6D108EEB3A3C66741F416B352CC414FB931072A8C5863DBBAA93C49B22
4ADC9F8CAA75F5C9BFEB2915D3505CD6144D20AF6779286AAF407AAC26D69248
C394FBB9BF32373F684ACA2E19C0F36192202ACAF72B1025D6F0CF7066494E82
7BB306A2A776E0F2B6F3F0E76AC8A13169FA8D6AD525762CBAE08E1976BA0FA8
68484244B2C6286C74EE91A2C98728E442E286200142B1A5906E7DF9201821B2
7907537A9A18D5757AABAE23C46953763B0140A749D71AFB31CB71FE8CEB3596
B5D9F27628C8660D823DA7A912BCD8F676248CEB1E8BAEB1BE8A438B018DEAB6
2C462D1458D0606C924EBCEC79E3D916B8F995C300564C3F71FF08DB1F5BD306
FF743BF5E6C612870C09ECDB532B05A7DD75F09723F8164F23FA51923DA26610
7C0EB4976641F969687AA087A6CC3FBA3B6B49CB68C88F765064561D586CDB15
837CCCDF95B1ED2288DB0948C8291CEF223BB458BF8475B7D75BEC1205D90B55
55DC2429D51153DF3C83901B6982E60F7C7F061954215DB5FAEB8718AB7756E4
DAA99626BD231EE3CF4090380F8238B83D56E35DB5099A025EA0320D1A3DE89D
5285DD> |-
/g24 <1C60D8A8C9B7D4743405E233890E0A55534F43CA9133B29299791AB3DB
BE2A168EA78A7CB17DB0B060289D007AE138DDD7A874C20C0D1520156DF13FAC
E49220AECA91409AE8B52232B88DA851C2DCC83FF3926F0A798122A50015C04B
7E00C749CF9804781F643848BCD8EE92B57CB757A23284ECD5E56D8CA18327E9
8454C09854624F1CB0E6F9646D20C4617F03B71EB8405F3505A5816E6439DF15
D91294CE077BD16B66305872E9E54213ED4B2F> |-
/g100 <1C60D8A8C9B7544E0B190CCF17AC40FC5FB79E17D90F4D9996E4640AE
C720DEE3DD9AB43080A2A2747E4FEB9D27010F0C393805606540F888AB7849F1
9EB2260FBF5614F1BF356A0D83CA6E9E401826D12829CB1B7D4D1A2437297EAD
434CA7A5112006DA550CD6F8ABF5CB7D09F31273FF39DA8643484195F09918F5
74C6BDB08CEC3EACB50E1F97A19618B6DB73370B0F21CA3B501ECD63174F03F4
E7B6D0BF229F39E4FEFE132F59B547C9249B01AC066ABD268352D20498D98E84
7669D322216405EAED7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILG+TTE22082D8t00 /Encoding get
dup 36 /g863 put
dup 37 /g448 put
dup 38 /g1007 put
dup 39 /g24 put
dup 40 /g100 put
pop
%ADOEndSubsetFont
/XURILG+TTE22082D8t00*1 
[/.notdef /g3 /g38 /g349 /g336 /g856 /g1005 /g894 
/g258 /g895 /g17 /g400 /g272 /g410 /g396 /g437 
/g286 /g381 /g296 /g374 /g367 /g373 /g282 /g271 
/g455 /g449 /g361 /g854 /g4 /g393 /g882 /g454 
/g346 /g853 /g855 /g862 /g863 /g448 /g1007 /g24 
/g100 215{/.notdef}rp]
XURILG+TTE22082D8t00 nf
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
210.72 355.924 mo
($\001\026\020\023\021\015\020\013\001\010\001\014\016\021\013\013\001\035\016\021\026\017\014\015\001\021\022\001\015\031\021\001%\020\014\015\021\016\013\001\003\023\001&'\005\001\( \003)
[4.55484 3.23914 5.87552 5.64499 5.87553 5.99606 3.72052 5.64497 4.55879 2.99913 5.51999 3.11917 
4.80173 3.96411 5.99606 4.31879 4.43878 2.99911 5.87552 3.96414 5.99603 5.99554 5.87552 4.80173 
3.84052 3.11914 5.87604 3.47797 3.11914 3.84052 8.04169 5.99609 3.11911 5.04376 5.64499 4.80173 
3.72052 5.99603 3.96417 4.43878 2.99915 2.75446 5.99554 2.99915 5.7619 6.95743 2.99503 2.99915 
5.51651 5.87555 0 ]xsh
448.079 355.924 mo
(\013\001\010\035\035\024\003\020\013\001\015\021\001)
[4.31879 3.23914 5.39999 5.87552 5.75552 2.63449 2.63449 5.64499 4.43878 3.11914 3.72055 5.99603 
0 ]xsh
110.519 369.724 mo
(\035\021\003\023\015\001)
[5.87553 5.99605 2.5145 5.87553 3.84052 0 ]xsh
gsave
159.12 360.964 mo
168.36 360.964 li
168.36 367.084 li
159.12 367.084 li
cp
clp
XURILH+Times-Roman*1 [5.29224 0 0 -5.30208 0 0 ]msf
159.12 365.764 mo
(31)
[4.92 0 ]xsh
grestore
gsave
161.64 360.484 mo
168.36 360.484 li
168.36 366.964 li
161.64 366.964 li
cp
clp
XURILM+Symbol*1 [5.29224 0 0 -5.30208 0 0 ]msf
161.64 365.764 mo
(\264)sh
grestore
gsave
144.6 360.724 mo
168.36 360.724 li
168.36 371.764 li
144.6 371.764 li
cp
clp
%ADOBeginSubsetFont: TEABAA+Symbol AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILM+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Rfraktur <1C60D8A8C9B6CE04DABE14048C0682C3ECCBDBBC7F0EC3E2B6E8E
CBA73343D4B8D26962955A3CB9C1A53787D9CF49975863019DC6E3E0F3CA7461
057BC717699AAB9DF7199FAE77C7DDE90A0550717D5DFB890B5F16E2DA53ED84
109AD9F99872B880049CAE8EC6603EA692C045D619A7C5B3158D6F4877DC2874
0B0ABA7E9322D66978BD1357E5BEA7F84584E4C5516516614007F3CE24FF343E
D34C387CB3EF4771322144436FBAC5798D8E8C0A86C22894E796DCFE0DBED66F
5DC0683253004B1C401FA67DF6779F8D486E1B5FA311BDF0161AA57EB03174A7
454F1F2FBA47367E6C2BFA685B5B8DCDCBBC1FEE409E1794AEDEE29B616F64EA
E303E170D06B04408D84442FCFEAAE1E265F3D8D55B04650635052EC09D7102C
D89CB1B31DFC2BB052A5C7D65BD84DE98FC2A39CA636CA1B04F681ECDC26DCAB
5FD5C> |-
/element <1C60D8A8C9B63C43D5BA51BD82A9B65593AE8966258DA252156C86
86BD208B3DC7D15823EE97063D37B27F871AD15A75031E0897A16F46DBDAA4C7
E73FE4C570D4CD688D68AB174E1C829B9AFDB1164DA35AF5EAC8D5CBFABDEF9A
409FA1F737C57A338303678306C1B3B4C3B253A378E664DBCE4844DD3773E38E
2BDF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILM+Symbol /Encoding get
dup 194 /Rfraktur put
dup 206 /element put
pop
%ADOEndSubsetFont
/XURILM+Symbol*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /minus 15{/.notdef}rp 
/equal 118{/.notdef}rp /multiply 13{/.notdef}rp /Rfraktur 11{/.notdef}rp /element 49{/.notdef}rp]
XURILM+Symbol nf
XURILM+Symbol*1 [9.15372 0 0 -9.17112 0 0 ]msf
144.6 369.844 mo
(\316\302)
[7.43997 0 ]xsh
grestore
XURILI+Times-Bold*1 [9.15372 0 0 -9.17111 0 0 ]msf
138.96 369.844 mo
(x)sh
%ADOBeginSubsetFont: WGJAAA+TTE22082D8t00 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILG+TTE22082D8t00 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g75 <1C60D8A8C9B64B6A243C5D499416E7BC4B22E8B629E09B8028C056D587
EE9CF3EDF2973119D5417CAB133A39C67B614E010AE0DD832BCFA4821BD97E22
5D43A74776F0BFD87B432DD8C21445FC4ADD550E21897D7C9E8DE35386D83093
D3FF407F51B83131A4C29A9A19F0D66509D8A0DC226CCF6F69FBA7442E368FC0
BB3313B0C314C003045967AC913CA278D0CD495B5C5D3B104FD8FE9306C40B1E
684F8B702E1CF50ACD13BCB247F919B2F23E586EB73CDBD82C4696F7C27EE8FF
40F1B366DF4538A9B1C7C873783BED33A9CC79EC8072551DCD083245F853F09D
7BA82936C03B9ABC832E704C4042C4CFF1A8C1165F42A0> |-
/g18 <1C60D8A8C9B786996D057DD9ECF9C9FE8F34FA37C423F5980BE7D78689
6E9EA4586FE497E33F39AB964ACDD89D26E486E7ED8F0DC4FBA51D700DEE7B19
1A63C96E17E766A2327A1204635F41F9C49078958E183EEFB6984182E65EDA1F
8B441B6E4AB84D91335816B7734083F4F4FD892A7BCA407D109F62E4EE67EE6C
6C391D2BD510DDC6B5D5CC22D17AC103A7D2131E72C317F3BAC05393ECDC293B
2ECAB1568ADB4263F35E5423335599179483E82F60A5AD75F98D7415F42E9485
43DCCF85D6B636864749244B612B22564859487973200635BA3DA904CEFECDBC
C8B01666891D22D161E426CFA4178953236E0C0CC024ABFD25C62F85F4D9DE2F
D93AA1C37E4CC144A605E56698682CB24FC97AD3BD836F4B14863B5FD90FDACD
F515F988F6144041EE6DE72D3696AC15A7CD39C4F2A134E2CF9BC30D1C6766E7
3FC3D1AD93F0B1FE898AB1ACC306D4BD68327F6E0E6DF2C6B68065348695779B
77D4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILG+TTE22082D8t00 /Encoding get
dup 41 /g75 put
dup 42 /g18 put
pop
%ADOEndSubsetFont
/XURILG+TTE22082D8t00*1 
[/.notdef /g3 /g38 /g349 /g336 /g856 /g1005 /g894 
/g258 /g895 /g17 /g400 /g272 /g410 /g396 /g437 
/g286 /g381 /g296 /g374 /g367 /g373 /g282 /g271 
/g455 /g449 /g361 /g854 /g4 /g393 /g882 /g454 
/g346 /g853 /g855 /g862 /g863 /g448 /g1007 /g24 
/g100 /g75 /g18 213{/.notdef}rp]
XURILG+TTE22082D8t00 nf
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
168.24 369.724 mo
(\001\023\021\015\001\027\020\003\023\004\001\014\021\024\024\003\023\020\010\016\001\031\003\015 \001\015 \020\001\024\003\023\020\001\013\020\004\025\020\023\015\005\001\)\015 \020\016\031\003)
[2.51913 5.87553 5.99606 3.8405 3.47913 5.87555 5.64497 2.63451 5.87553 5.28326 3.47913 4.92172 
5.99605 2.5145 2.63451 2.63449 5.75552 5.64499 5.51999 3.9641 3.47916 8.04172 2.63452 3.84052 
5.99551 3.47913 3.84052 5.87549 5.64502 3.47913 2.5145 2.75449 5.87555 5.64496 3.47916 4.43878 
5.64499 5.28326 9.00189 5.64496 5.99554 3.72049 2.87497 3.47916 7.43878 3.84052 5.87555 5.64496 
3.96414 8.04172 0 ]xsh
408.48 369.724 mo
(\013\020!\001\013\003\025\035\024\020\016\001\026\003\013\015\010\023\014\020\001)
[4.31879 5.76495 2.7655 3.59915 4.31879 2.63449 9.00186 5.87552 2.63449 5.64499 3.96411 3.59918 
5.87552 2.5145 4.43878 3.84052 5.39999 5.87552 4.80173 5.52496 0 ]xsh
110.52 383.524 mo
(\014\010\024\014\017\024\010\015\003\021\023\001\014\010\023\001\027\020\001\017\013\020\026\005\001\001)
[4.80172 5.52 2.3945 4.92171 5.87553 2.5145 5.39999 3.72052 2.63449 5.99605 5.87553 2.39914 
4.92172 5.39999 5.99554 2.39914 5.8755 5.64499 2.63914 5.87553 4.3188 5.64497 5.87555 2.99498 
2.51913 0 ]xsh
%ADOBeginSubsetFont: NKWBAA+TTE25798A0t00 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILJ+TTE25798A0t00 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g1006 <1C60D8A8C9B7A0860A0EABD9400A203C0BC1A5DA368E9E998E0B8DFE
CE44E9CDA80B2A9156DDEE01D94924039067B0EBEE89E707F0C7E81E175152A2
55458897E28D6D1C63A21BFE52338B6A4CB2C7EFA79566D393541F308F5E6159
D842E8F2B0CE06BB26E8AAE901B76E088EC1FC8508B1132911DF431CEFF3DE44
408C131AF2DD2A856BAA76CA7781D18F52F223D6EE0BE75D73C555CCEF9C7E98
DD7449C09CB5D689089C953CA8E834F0D56FCE9A1AA220B6BE5EE66037CB030F
C8E88D8336874EBB6E974774A4032C9E1DB67038C0F79304FA745C905064F74A
04320BE4F370F5AB7EE2E6DCB7C946F8A858DD91B9047D4FE706AAE892A8990A
A4240AF731C1ABAE1214C1790721563568202772ECE78CA68486C9E907412F96
39E30EB479F7DF38B462C9DD18FDE52A830A2F5A52C3479F990AC97100D4ED79
D22FDE0B6FF134388DBEC60F18330783B61E8BF1E45334615DCD56B38EDB46D7
5389210C72C07C5D2A8AF965BE1FCF70> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILJ+TTE25798A0t00 /Encoding get
dup 8 /g1006 put
pop
%ADOEndSubsetFont
/XURILJ+TTE25798A0t00*1 
[/.notdef /g3 /g94 /g410 /g286 /g393 /g1005 /g855 
/g1006 247{/.notdef}rp]
XURILJ+TTE25798A0t00 nf
XURILJ+TTE25798A0t00*1 [11.2584 0 0 -11.28 0 0 ]msf
110.52 406.564 mo
(\001)sh
110.52 429.724 mo
(\002\003\004\005\001\010\007)
[5.28395 3.96361 5.63535 6.00429 7.55913 5.76189 0 ]xsh
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
147.84 429.724 mo
(\001*\010\024\014\017\024\010\015\020\001%\020\014\015\021\016\013\001)
[7.31914 5.99777 5.39999 2.63449 4.80173 5.87553 2.63451 5.39998 3.7205 5.76498 7.31914 5.04379 
5.64499 4.92171 3.84052 5.87605 3.96413 4.43881 0 ]xsh
gsave
249.24 427.444 mo
254.04 427.444 li
254.04 433.564 li
249.24 433.564 li
cp
clp
XURILK+Times-Italic*1 [5.3226 0 0 -5.33292 0 0 ]msf
250.2 432.244 mo
(j)sh
grestore
gsave
244.56 420.604 mo
254.04 420.604 li
254.04 431.884 li
244.56 431.884 li
cp
clp
%ADOBeginSubsetFont: TEABAA+Symbol AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILM+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/rho <1C60D8A8C9B796767DA1A110F27615904A39744A5918211FC1E2FDBF39
C710C472C4223C5765E2A900792178CCE8A18F431B082ED324BE1C283558E024
B59B242B1A70B574BA1BDEA17390B17D01189C811469FA8B63B4C99208390A24
B80980717B3325D13C85CA92AECDE16C18DA55064088D08F52572161350C8C6C
705E3B9E7FF805494B2B2E5772> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILM+Symbol /Encoding get
dup 114 /rho put
pop
%ADOEndSubsetFont
/XURILM+Symbol*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /minus 15{/.notdef}rp 
/equal 52{/.notdef}rp /rho 65{/.notdef}rp /multiply 13{/.notdef}rp /Rfraktur 11{/.notdef}rp 
/element 49{/.notdef}rp]
XURILM+Symbol nf
XURILM+Symbol*1 [9.20724 0 3.14904 -9.225 0 0 ]msf
245.039 429.844 mo
(r)sh
244.799 430.083 mo
(rr)
[.239502 0 ]xsh
244.799 429.844 mo
(r)sh
grestore
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
255.72 429.724 mo
(\001\010\023\026\001)
[2.39912 5.52002 5.75549 5.99554 0 ]xsh
gsave
291.84 427.444 mo
296.04 427.444 li
296.04 433.564 li
291.84 433.564 li
cp
clp
XURILH+Times-Roman*1 [5.3226 0 0 -5.33292 0 0 ]msf
291.84 432.244 mo
(1)sh
grestore
gsave
285.96 427.444 mo
296.04 427.444 li
296.04 433.564 li
285.96 433.564 li
cp
clp
XURILK+Times-Italic*1 [5.3226 0 0 -5.33292 0 0 ]msf
286.92 432.244 mo
(j)sh
grestore
gsave
289.08 426.964 mo
296.04 426.964 li
296.04 433.444 li
289.08 433.444 li
cp
clp
XURILM+Symbol*1 [5.3226 0 0 -5.33292 0 0 ]msf
289.08 432.244 mo
(+)sh
grestore
gsave
281.4 420.604 mo
296.04 420.604 li
296.04 431.884 li
281.4 431.884 li
cp
clp
XURILM+Symbol*1 [9.20724 0 3.14904 -9.225 0 0 ]msf
281.879 429.844 mo
(r)sh
281.639 430.083 mo
(rr)
[.239502 0 ]xsh
281.639 429.844 mo
(r)sh
grestore
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
297.72 429.724 mo
(\001\031 \003\014 \001\010\016\020\001\016\020\013\035\020\014\015\003%\020\024\030\001\035\020\016\035\020\023\026\003\014\017\024\010\016\001\015\021\001)
[2.51917 8.16171 5.87552 2.5145 4.92172 5.87552 7.31915 5.39999 3.96411 5.76498 7.31915 3.96414 
5.64496 4.31879 5.87552 5.64499 4.92172 3.72052 2.5145 5.16379 5.64499 2.51447 5.16415 7.31915 
5.87552 5.64496 3.96414 5.87549 5.64499 5.99551 5.87552 2.5145 4.92175 5.87549 2.51453 5.51996 
3.84412 7.43915 3.72052 5.87601 0 ]xsh
110.52 447.844 mo
(\015\010\023\004\020\023\015\013\001)
[3.72051 5.40001 5.87553 5.28326 5.64499 5.99553 3.72052 4.55879 0 ]xsh
gsave
166.2 444.124 mo
170.88 444.124 li
170.88 453.844 li
166.2 453.844 li
cp
clp
%ADOBeginSubsetFont: LQACAA+TTE2559458t00 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /LQACAA+TTE2559458t00 def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g74 put
def
/FontBBox {-28 -252 1126 899} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B5EE31F4> |-
/g74 <1C60D8A8C9B8391507084A10431420109084B7DAC83B91882B4BE85A2D
EFD5D77C852C60DF2A5D2591EDBF93235AFFAC9ABF7B5CA79A5F48322D5F4847
A2A368A11CEDBBCA5E6C9F4222BC82A4C9CB955F1A401743C9B494C097C758AB
F0BAD7874F2D721FA488D62ACCD7B165E4B84620C34B8BE4CDCBB2E2A01DB93B
83B7EDE253A2A31A1EBCE4FAE671E45BE79A27BAA30A9655A754FACA8F7D2E5C
6C9058CC807B488D9340EF3D039861B7CCB76F08F9F22184DE30B06677914ED2
2E79EECC6BEEAD36D9C230CD5413A287AF445A7E9487B0DD38E83AB7CFCA3881
2411D0535D467248BC1EE7EAE42B249E2A54EF35E282DBDDD426820FA84A48BD
27AE040123232A1D8A3797E671A4BEAF04B3CE1B41788D81DCCF88BC9178338A
72B464B87826EAC121C3BE88813AC849F8ED92414FC2AEE30D2E7BBDD4DA5363
FB0757985715E41309A82F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XURILN+TTE2559458t00 /LQACAA+TTE2559458t00 findfont ct_VMDictPut
/XURILN+TTE2559458t00*1 
[/.notdef /g74 254{/.notdef}rp]
XURILN+TTE2559458t00 nf
XURILN+TTE2559458t00*1 [5.7942 0 0 -5.80548 0 0 ]msf
166.32 450.844 mo
(\001)sh
grestore
gsave
154.68 435.724 mo
170.88 435.724 li
170.88 453.004 li
154.68 453.004 li
cp
clp
%ADOBeginSubsetFont: BMGBAA+TTE25F6AE8t00 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILL+TTE25F6AE8t00 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g45 <1C60D8A8C9B556A65B7B870D02455269B7B19CF2BCCBEDFDC730F4A27E
F8FD20E014431599AB2A152CE5A07AB6090BDDA6C9B736356D3F7A3D8CEA9BF6
9F89F74C75616063520CF6F941653CE7B88124DFD862A0B406F991FC39FA528F
5344D7096A0FFAC98066E81BE6675079984765D78B8D4D27CC59691705812743
406C95765904ADBCAAAEB0089DD394E0B3FEEED05635E910F784211546FFCE21
DE53E34C6C0C685E0B2D3DAD2D01B9EC26A8FCA5A6CFB98796BA2F1D33D7908B
126B4087B1005834D379B50B828576CB9D8A2398367DD6D94F8AE2B76EC687EE
24C8BD8530F28FCCD6AF33B94149BAD0D92911C6858F10D15FE19757E3DDB21A
9A2ED11AEDD03293C65CDC5485D2B7A201F977DAA658FF9BA0F5C8CFACAA6FD1
F4B5AAE0F96B04DB107E0B99BDA203D0212E7BA25073ACED5AC6F9753824BA94
7C9A08CC71125CA5B5CD5CAF46B18CBAED25FBC560D8C0B3DA89166D869FB316
DBC350CE454D2951F2D00C8151B83C756D99E9615015B6BB94981D3C6E0A68A5
81A3006927DC44804FA74FB986D4B0E79C141C1747C9B2C50D3977E78938B9C8
FF3C06C02F63ED5005E0F73E5BBBDDFCC1DAAB203825ABFAF6DD7E423AA97984
0918E24E63BB5D5D586D1E7DC3142F1365222076C3081FE1B87C270CA4E0B061
70FEF3EDDBF683A1A5AF631644C4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILL+TTE25F6AE8t00 /Encoding get
dup 2 /g45 put
pop
%ADOEndSubsetFont
/XURILL+TTE25F6AE8t00*1 
[/.notdef /g48 /g45 253{/.notdef}rp]
XURILL+TTE25F6AE8t00 nf
XURILL+TTE25F6AE8t00*1 [10.0228 0 0 -10.0421 0 0 ]msf
154.68 447.364 mo
(\002)sh
grestore
XURILJ+TTE25798A0t00*1 [11.2584 0 0 -11.28 0 0 ]msf
170.88 447.844 mo
(\001)sh
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
173.4 447.844 mo
(\010\023\026\001)
[5.39999 5.87552 5.87553 0 ]xsh
gsave
211.92 444.124 mo
216.48 444.124 li
216.48 453.844 li
211.92 453.844 li
cp
clp
%ADOBeginSubsetFont: HCXBAA+TTE2578B10t00 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HCXBAA+TTE2578B10t00 def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g17 put
def
/FontBBox {-40 -252 1026 898} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B5EE31F4> |-
/g17 <1C60D8A8C9B7A73DA4217147C01B74641ED7307F7D83D0E936BF23653D
097C8457820104F05F123D7B325D5CF2B91834DD3EF06A8A9816387770936FAC
01C1452DB378C5F031556EC097EBBFC6467829A38952439CE57E96A98287A99C
C28F8345FF9A4887C8F25AF95DC6B780A11427C2B22F856912F681971CC552A5
4C25A8C83ACC3DB0470DEBA3835172CC74D0EC02479BE9205A9ABFB6> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XURILO+TTE2578B10t00 /HCXBAA+TTE2578B10t00 findfont ct_VMDictPut
/XURILO+TTE2578B10t00*1 
[/.notdef /g17 254{/.notdef}rp]
XURILO+TTE2578B10t00 nf
XURILO+TTE2578B10t00*1 [5.7942 0 0 -5.80548 0 0 ]msf
211.92 450.844 mo
(\001)sh
grestore
XURILN+TTE2559458t00*1 [5.7942 0 0 -5.80548 0 0 ]msf
205.56 450.844 mo
(\001)sh
gsave
207.96 443.884 mo
216.48 443.884 li
216.48 453.844 li
207.96 453.844 li
cp
clp
%ADOBeginSubsetFont: FKTBAA+TTE25F8518t00 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /FKTBAA+TTE25F8518t00 def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g12 put
def
/FontBBox {-166 -252 1083 950} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B5EE31F4> |-
/g12 <1C60D8A8C9B6FC2D96B1D4504BDF4F1C9C45DBA24A5F6A7AACA5D0C932
3E795796DFB25E8FCE1EB4C7E60A3D9DE4ABC41A0F9189C3FAD8F81886916F8B
27351FA22732BEDFD784D41708B745DA7DCA90F866E9EE3694E8C7851F9623DC
AC91519E4DE3E9ABC95DB9AF8ED913DD5E4AD7152674F1B7FBF4ED0D2831FC0E
0F0D05882333663660E04323841634C562134EB0BA7920EB28D4> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XURILP+TTE25F8518t00 /FKTBAA+TTE25F8518t00 findfont ct_VMDictPut
/XURILP+TTE25F8518t00*1 
[/.notdef /g12 254{/.notdef}rp]
XURILP+TTE25F8518t00 nf
XURILP+TTE25F8518t00*1 [5.7942 0 0 -5.80548 0 0 ]msf
207.96 450.844 mo
(\001)sh
grestore
XURILL+TTE25F6AE8t00*1 [10.0228 0 0 -10.0421 0 0 ]msf
194.52 447.364 mo
(\002)sh
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
216.48 447.844 mo
(\001\010\023\026\001\027\021\015 \001\035\010\016\010\024\024\020\024\001\015\021\001\015 \020\001\035\024\010\023\020\001\031\003\015 \001\023\021\016\025\010\024\001)
[2.39914 5.39998 5.87553 5.99554 2.63913 5.87553 5.87605 3.84052 5.8755 2.63916 5.87552 5.39999 
3.96411 5.40002 2.63446 2.51453 5.64493 2.63452 2.51913 3.72052 5.87604 2.63916 3.72052 5.87552 
5.76498 2.39914 5.87555 2.63449 5.51999 5.87555 5.64496 2.51917 7.92172 2.75446 3.72052 5.99554 
2.39911 5.87555 5.99603 3.96411 9.00189 5.40002 2.63449 0 ]xsh
gsave
423.48 446.164 mo
428.64 446.164 li
428.64 452.284 li
423.48 452.284 li
cp
clp
XURILK+Times-Italic*1 [5.21724 0 0 -5.22756 0 0 ]msf
424.44 450.964 mo
(j)sh
grestore
gsave
417.24 440.404 mo
428.64 440.404 li
428.64 450.604 li
417.24 450.604 li
cp
clp
XURILI+Times-Bold*1 [9.00276 0 0 -9.01968 0 0 ]msf
417.24 448.684 mo
(n)sh
grestore
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
428.64 447.844 mo
("\001\001)
[3.00479 2.51917 0 ]xsh
110.52 474.604 mo
(\001)sh
gsave
253.2 495.484 mo
306.48 495.484 li
306.48 503.164 li
253.2 503.164 li
cp
clp
XURILK+Times-Italic*1 [6.6474 0 0 -6.66 0 0 ]msf
254.28 501.484 mo
(jjj)
[23.04 25.44 0 ]xsh
grestore
gsave
281.64 486.964 mo
303.72 486.964 li
303.72 501.004 li
281.64 501.004 li
cp
clp
XURILM+Symbol*1 [11.4979 0 0 -11.52 0 0 ]msf
281.64 498.484 mo
(\264)sh
grestore
XURILI+Times-Bold*1 [11.4979 0 0 -11.52 0 0 ]msf
269.52 498.484 mo
(n)sh
gsave
288.72 486.964 mo
306.48 486.964 li
306.48 504.964 li
288.72 504.964 li
cp
clp
XURILL+TTE25F6AE8t00*1 [11.4979 0 0 -11.52 0 0 ]msf
288.72 498.484 mo
(\002)sh
grestore
gsave
247.8 486.964 mo
281.64 486.964 li
281.64 501.004 li
247.8 501.004 li
cp
clp
XURILM+Symbol*1 [11.4979 0 3.9324 -11.52 0 0 ]msf
248.159 498.484 mo
(r=)
[11.64 0 ]xsh
247.919 498.723 mo
(r=)
[11.64 0 ]xsh
248.159 498.723 mo
(r=)
[11.64 0 ]xsh
247.919 498.484 mo
(r=)
[11.64 0 ]xsh
grestore
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
306.48 498.604 mo
(\001!\001)
[7.07913 2.8855 0 ]xsh
gsave
333 495.484 mo
392.28 495.484 li
392.28 503.164 li
333 503.164 li
cp
clp
XURILH+Times-Roman*1 [6.6474 0 0 -6.66 0 0 ]msf
333 501.484 mo
(11)
[54.6 0 ]xsh
grestore
gsave
326.28 495.484 mo
392.28 495.484 li
392.28 503.164 li
326.28 503.164 li
cp
clp
XURILK+Times-Italic*1 [6.6474 0 0 -6.66 0 0 ]msf
327.36 501.484 mo
(jjj)
[29.28 25.32 0 ]xsh
grestore
gsave
329.76 494.764 mo
392.28 494.764 li
392.28 502.924 li
329.76 502.924 li
cp
clp
XURILM+Symbol*1 [6.6474 0 0 -6.66 0 0 ]msf
329.76 501.484 mo
(++)
[54.5999 0 ]xsh
grestore
gsave
360.96 486.964 mo
383.04 486.964 li
383.04 501.004 li
360.96 501.004 li
cp
clp
XURILM+Symbol*1 [11.4979 0 0 -11.52 0 0 ]msf
360.96 498.484 mo
(\264)sh
grestore
XURILI+Times-Bold*1 [11.4979 0 0 -11.52 0 0 ]msf
348.84 498.484 mo
(n)sh
gsave
368.04 486.964 mo
390.12 486.964 li
390.12 504.964 li
368.04 504.964 li
cp
clp
XURILL+TTE25F6AE8t00*1 [11.4979 0 0 -11.52 0 0 ]msf
368.04 498.484 mo
(\002)sh
grestore
gsave
320.88 486.964 mo
360.96 486.964 li
360.96 501.004 li
320.88 501.004 li
cp
clp
XURILM+Symbol*1 [11.4979 0 3.9324 -11.52 0 0 ]msf
321.239 498.484 mo
(r=)
[17.8799 0 ]xsh
320.999 498.723 mo
(r=)
[17.8799 0 ]xsh
321.239 498.723 mo
(r=)
[17.8799 0 ]xsh
320.999 498.484 mo
(r=)
[17.8799 0 ]xsh
grestore
%ADOBeginSubsetFont: WGJAAA+TTE22082D8t00 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILG+TTE22082D8t00 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g1006 <1C60D8A8C9B7A0860A3F41F4B5F8C84A302144D2A68052268BA33C08
F14E9024203A43F9861DB1372AE620C85B5997156713B3D52B841947202E77B0
C2CB414A698B86ABC8A4E75821012456D5020DA227DFEF8C5D8DB95EBE919EE7
1528F7186EAF21E351CBD957516793A596628548012B490542857EE9AD26B93B
E09822488FFA92D417AEC74A1F7CD3F4086D2106FC51C85A2037F2B9A0C7F20F
95265886609863A1C5F24DF7B0A900E498DA2F78FC8847FC48711DA5F7718C54
3AB1317AD922AE297322A814FAE4926A273690C557D10E81AE194D331B49C1AE
8C81F09FF9C6C0138B7CA170F398B4828657BCD8F518515EBEE88F3E7CAAF8D5
3DFF51CD8B58FC43A0393FF3BAAC61C4C54BAED846AB03C5029732B46B642E71
B9F477640318C582068EEDAD42004E409178DCD37800E9D052502DD85B334EBD
679CA70294673E8EE8A3969E138989BAAC7D6DF5921118D0D203FDC015CB8008
4F99BE2DC9C90C6E2171BED79C2858C6> |-
/g1008 <1C60D8A8C9B7A0860A05CDAB07FCC8C6F1456010984E043BC1080A8E
4004C7A6F96FF4AD7F2A4B870B666CC1C7EA11B61E750FAAE008DD2598CE85BE
E4C2722299D9BDE6BD901B361B9FFD1A74A6881105044BA6119A67BABA2C5AA3
44BC5F5DC3AF8B4A3D3F44101FD3AF23A3469D02149FFD63F48CC3EA80D9EB13
A8494F7709B008152FFA0D84385AFFDE11B5FA65E8FC9AAD2BCC7E5E38278323
5F954A8738DCC9A5760FEB582741B59F3C495CA1895A9F6120A54415FC0BB449
4CFF5A03D1CB88055E001BDA6B35B19BB5CD64D26C1A126C3877F4B0A8ECE981
7BE4A2EC5FA3C6FC9FCDEF6FA038892760F02C70AC24D1AFF24D0C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILG+TTE22082D8t00 /Encoding get
dup 43 /g1006 put
dup 44 /g1008 put
pop
%ADOEndSubsetFont
/XURILG+TTE22082D8t00*1 
[/.notdef /g3 /g38 /g349 /g336 /g856 /g1005 /g894 
/g258 /g895 /g17 /g400 /g272 /g410 /g396 /g437 
/g286 /g381 /g296 /g374 /g367 /g373 /g282 /g271 
/g455 /g449 /g361 /g854 /g4 /g393 /g882 /g454 
/g346 /g853 /g855 /g862 /g863 /g448 /g1007 /g24 
/g100 /g75 /g18 /g1006 /g1008 211{/.notdef}rp]
XURILG+TTE22082D8t00 nf
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
392.28 498.604 mo
(\001\001\001\007+\011\001)
[22.7991 33.8391 33.8391 3.47742 5.64191 3.35745 0 ]xsh
%ADOBeginSubsetFont: NKWBAA+TTE25798A0t00 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILJ+TTE25798A0t00 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g1007 <1C60D8A8C9B7A0860A3274AB1A8C1F49BF686CD2C1588BDC12CC8207
04CF19D93C93C231E993B0B75DC6AA86C65F44B2D0E19F264466DEA64687CC83
E492AD2653D9403FB4E73C98A50E7BEF1F3DE8326D2F81FDE2A365C00515D32A
4A06C7728D5D1DBF07485A2AC33D5A448BE60805214AED6C9DFF66018E03297A
9977A108BAF3BA46AF1E2726D76A28AB404CBF2996ED989FC3B982A75012D45D
889D0BD5E25F7EB84D1F899584CA6E0D9A8DBD48180DF16723056C328C60BB57
667DE84A7E110FF3EA013552E5C19AE0B4CB12A049A3FA8B009D36175AF78E87
2DB0FB0953F22DB0364210C2246FD82B94CDAF9C70C175B26BD3AF581784B364
FFF437E9DF97AF409899E727F1F9325BB31DE0CF61A837EA863EA32DC8AAF9EA
58EA9B5EFB890161658FE328355A173F1C330FB938C137A2F8804B5B4990F71A
1B91D6E81E49E460896B5E30898C8F10CAD8F8112A6528DB540F81AAE760CE56
BA07107956FD5D421FD7706900715BD0757BE7BC2C0CC772143A149382E58C90
F410BEA5B39AA768DE4894A2A08B831325095342DEC0E965759A93905EE212B4
F4D18C5B4836F243B2A92A820185C98633C2BAABBCB6A1A74D00EC0B5B68A08B
009313209F5C177FC125FD2095A52C3B59AE7CC0D91B6230C77AA175EDA5F2EE
19F2D9214627D7784BD5F29E05FE9FDD00973B02BD25D214007CC7A1EB6B8E2F
D7232B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILJ+TTE25798A0t00 /Encoding get
dup 9 /g1007 put
pop
%ADOEndSubsetFont
/XURILJ+TTE25798A0t00*1 
[/.notdef /g3 /g94 /g410 /g286 /g393 /g1005 /g855 
/g1006 /g1007 246{/.notdef}rp]
XURILJ+TTE25798A0t00 nf
XURILJ+TTE25798A0t00*1 [11.2584 0 0 -11.28 0 0 ]msf
110.52 525.484 mo
(\001)sh
110.52 548.764 mo
(\002\003\004\005\001\011\007\001)
[5.28395 3.96361 5.63535 6.12428 2.75914 5.76187 3.24139 0 ]xsh
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
146.039 548.764 mo
('\020\015\020\016\025\003\023\020\001\010\001,\036%\020\016\015\020\037\001\035\021\024\030\004\021\023\001\031 \003\014 \001\003\013\001\010\001\035\010\016\015\001\021\022\001\015 \020)
[6.9574 5.64499 3.72052 5.64499 3.96411 9.1219 2.51448 5.87553 5.64499 2.75912 5.40001 2.63913 
5.76189 3.47827 5.28377 5.64499 3.84413 3.84052 5.64497 4.91881 2.63914 5.87553 5.99605 2.63449 
5.16412 5.28326 5.99606 5.87552 2.63913 8.04172 5.87549 2.63452 4.8017 5.87555 2.75916 2.5145 
4.55881 2.63913 5.39999 2.87915 5.87552 5.39999 3.96411 3.72052 2.63916 5.99606 3.47794 2.75912 
3.84052 5.87552 0 ]xsh
383.639 548.764 mo
(\001\014\016\021\013\013\036\013\020\014\015\003\021\023\001\021\022\001\013\020\004\025\020\023\015\001)
[2.63916 4.92172 3.96411 5.87607 4.43878 4.43878 3.4783 4.43878 5.64499 4.80173 3.72049 2.63449 
5.87604 5.87552 2.75916 5.99606 3.47794 2.63916 4.43878 5.64499 5.28326 9.00189 5.64499 5.87555 
3.72049 0 ]xsh
gsave
119.88 559.804 mo
124.68 559.804 li
124.68 566.164 li
119.88 566.164 li
cp
clp
XURILK+Times-Italic*1 [5.5824 0 0 -5.59308 0 0 ]msf
120.72 564.844 mo
(j)sh
grestore
gsave
112.08 552.604 mo
124.68 552.604 li
124.68 564.484 li
112.08 564.484 li
cp
clp
%ADOBeginSubsetFont: TEABAA+Symbol AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILM+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Omega <1C60D8A8C9B6F576980EBE04CF04230FCC0E9A79B8054B5127BBCBB7
9E509A25D1DDC6969132A3575A6C000CB37333A783C9B8095DB1502AA1B5FE83
49C0C77D07CF5DFC1FE2F37F5403F4B615EE29015A5C915B4AD938AEF99F46BD
702CD9B38301FA00BE141C1785E73B1130236E4DA4D43F240FCD2FFE4BC56A1C
665D6F7FB959C2BBAF69DC105DD1B228C38A8DBDAE5CBF6CF62545C66ACE708F
694B8B78CC348C9C2EA524EDF48AE41287E0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILM+Symbol /Encoding get
dup 87 /Omega put
pop
%ADOEndSubsetFont
/XURILM+Symbol*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /minus 15{/.notdef}rp 
/equal 25{/.notdef}rp /Omega 26{/.notdef}rp /rho 65{/.notdef}rp /multiply 13{/.notdef}rp 
/Rfraktur 11{/.notdef}rp /element 49{/.notdef}rp]
XURILM+Symbol nf
XURILM+Symbol*1 [9.65627 0 0 -9.675 0 0 ]msf
112.08 562.324 mo
(W)sh
grestore
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
124.68 562.324 mo
(\005\001\( \003\013\001\013\020\014\015\003\021\023\001\003\013\001\014\017\015\001\027\030\001\010\001\035\024\010\023\020\001\014\021\023\015\010\003\023\003\023\004\001\015 \020\001\035\021\003)
[2.87502 5.15913 5.51657 5.87553 2.63448 4.3188 5.27913 4.3188 5.64499 4.92172 3.72052 2.5145 
5.99603 5.99554 5.15913 2.63451 4.43878 5.15915 4.80173 5.99554 3.7205 5.27914 5.87552 5.16412 
5.27913 5.39998 5.27917 5.8755 2.5145 5.51999 5.75552 5.76498 5.27914 4.80173 5.99603 5.87552 
3.72052 5.39999 2.5145 5.87555 2.75449 5.87552 5.28326 5.27914 3.72052 5.87552 5.76498 5.15915 
5.87552 5.99603 0 ]xsh
372.84 562.324 mo
(\023\015\001)
[5.87552 3.84052 0 ]xsh
gsave
386.76 555.844 mo
393.72 555.844 li
393.72 564.364 li
386.76 564.364 li
cp
clp
XURILI+Times-Bold*1 [10.2042 0 0 -10.2239 0 0 ]msf
386.76 562.684 mo
(x)sh
grestore
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
393.6 562.324 mo
(\001\010\023\026\001\015 \020\001\024\003\023\020\001\013\020\004\025\020\023\015\001)
[2.51917 5.39999 5.87552 5.99551 5.15915 3.84052 5.87552 5.64499 5.15912 2.63449 2.63449 5.87552 
5.64499 5.27917 4.31879 5.64499 5.40326 9.12189 5.64499 5.75555 3.84045 0 ]xsh
gsave
147.48 576.484 mo
152.16 576.484 li
152.16 582.604 li
147.48 582.604 li
cp
clp
XURILH+Times-Roman*1 [5.3226 0 0 -5.33292 0 0 ]msf
147.48 581.284 mo
(1)sh
grestore
gsave
118.2 576.484 mo
152.16 576.484 li
152.16 582.604 li
118.2 582.604 li
cp
clp
XURILK+Times-Italic*1 [5.3226 0 0 -5.33292 0 0 ]msf
119.16 581.284 mo
(jj)
[23.4 0 ]xsh
grestore
gsave
144.6 576.004 mo
152.16 576.004 li
152.16 582.484 li
144.6 582.484 li
cp
clp
XURILM+Symbol*1 [5.3226 0 0 -5.33292 0 0 ]msf
144.6 581.284 mo
(+)sh
grestore
gsave
124.2 569.644 mo
142.8 569.644 li
142.8 580.924 li
124.2 580.924 li
cp
clp
%ADOBeginSubsetFont: TEABAA+Symbol AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILM+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/arrowright <1C60D8A8C9B5FD593B498B1CF3AAC6B72CD9F0DECF3BE27F563
0A1AA3A6B945FAE48062252C84E3D00541D03AEEDA44A60D17B803E5BEA86F3E
2ED576311E3F2135761> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILM+Symbol /Encoding get
dup 174 /arrowright put
pop
%ADOEndSubsetFont
/XURILM+Symbol*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /minus 15{/.notdef}rp 
/equal 25{/.notdef}rp /Omega 26{/.notdef}rp /rho 59{/.notdef}rp /arrowright 5{/.notdef}rp 
/multiply 13{/.notdef}rp /Rfraktur 11{/.notdef}rp /element 49{/.notdef}rp]
XURILM+Symbol nf
XURILM+Symbol*1 [9.20724 0 0 -9.225 0 0 ]msf
124.2 578.884 mo
(\256)sh
grestore
gsave
111.84 569.644 mo
152.16 569.644 li
152.16 584.044 li
111.84 584.044 li
cp
clp
XURILL+TTE25F6AE8t00*1 [9.20724 0 0 -9.225 0 0 ]msf
111.84 578.884 mo
(\001\001)
[23.2801 0 ]xsh
grestore
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
152.16 578.764 mo
(\005\001\034\013\001\013 \021\031\023\001\003\023\001)
[2.87502 4.19913 6.4843 4.4388 4.19914 4.55879 5.87552 5.87607 8.16171 5.87553 4.19913 2.63451 
5.99553 0 ]xsh
%ADOBeginSubsetFont: NKWBAA+TTE25798A0t00 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILJ+TTE25798A0t00 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g38 <1C60D8A8C9B770DA42E3E4596D8EFD7C8E7912558C96795C6DBB3128D0
6218AF37A19F75D792B5AECEE44F752B25EBEACB394ECE0EA49058539337EC35
E279C6ED4B273546FBED2676D5FE022496DFF53B7089864E307D8BA635E34E9F
F6D02542D02030F9FC86C8D09DDDCEF7D5C2EAE554C0182950E173A0511AAA50
1896A8C3AE5677F3D499060D3216DD663502361076E70F4B86159C795A22D04C
1A963872790D663AE876A8F37D2621D7A8E3FBE607C29E326F851161958C23A5
A47AEBFA702AF02E667BCCA9A2D6A877B61CC687220EE9A09377F471B8> |-
/g349 <1C60D8A8C9B874A685BEE7073E3D9BEB2350BB486AC62AB5FFB3F3055
796FFA7201F6E4CDF32059564C619C9CC449E2E13D3438C6F3A00A8C33DF67EE
D72B4A703E19615397FBD65B8F41AB93A2D076C7948B4D6A7E1920548D052C7A
B1831CD8F1E6F01CDE398A3464141E18D2DB8A524CC3BE1885811A2FA4464E9B
FA44F3B137A209AC07BC2D4DC8265BE2C3CDB96FC76B4E494C7989F89FD865B5
63D37857FCA1A5FB165B3A362BB87A93EC69254C2AAA91985E82347B6547083A
306CE> |-
/g336 <1C60D8A8C9B741FC33483764299A12FECF5B424B921F1638B418D49AD
8CC9963C63B3AA219A5D4BE1E61602E0A46D9B7EFE172316C6D5B892D6ADDE5D
2528F58404262014692776607ED9FEF376902580B8C02BD731773D6FB7F2B7E8
EB85C23FCC5E1AF9DFBBC90E2E61912ECD90630A69F23FF0B8C4EE724E614878
24F0AD0E39D6070F4E4045884E75A2063D1947EBCB0E10D1BE681823C4CDB758
BE763EF892DC6733924007429A4A2787F28FEA57B2FFB5ABDDFA7D9E9074D9F3
756D6F34C0CF43B19360B382394D183AF45B0B3B98FC3F1D24257EBFF530F2F2
77B17FA1E0C87E667FD5F85997B524610195116A8FE72672B292B06D63E095A2
E86A919F48751EA4D1B00566804965EA47D6EEDA872F76C4297F60EB4DB86C21
5A3ABBA39D53700A0373989904046CD6FF12E13667085134B6D432AC6DF8D6B8
D4A1E48A3CB9A9B89F04E1FA7F186F4239393424E4D2D80048B3B74D449F9056
EFDA684BFA5A5756929753C434B4ECBD6DA1C66BD87629F33C7FB19CC2BFD390
6732A4B9F90C757E2A2AD993D4CCBB93191D5606033A5FB35BDD63214D3B0478
ED8768EC2FD124C41DB78452CEBD65904535C9E7E425B9032F384103F708FC89
C6168EB599D175B46EF0FF68E2E1C705DCAA4668D7FE56C29AE86E26C1109490
736A57C4139D482B4A559434FC9EA8FE3D7CF06BDE7DB76036EF6D4AD6F172AE
C1AB158F9> |-
/g856 <1C60D8A8C9B861542ACEB5970022C0864D11AE4C87632B2DD396DA635
8319B6D48D24425E7DE63E8FD4F9DF677EDF905EBA25E0DA26076BBE99D168D3
CC7084C557F52EE1767B3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILJ+TTE25798A0t00 /Encoding get
dup 10 /g38 put
dup 11 /g349 put
dup 12 /g336 put
dup 13 /g856 put
pop
%ADOEndSubsetFont
/XURILJ+TTE25798A0t00*1 
[/.notdef /g3 /g94 /g410 /g286 /g393 /g1005 /g855 
/g1006 /g1007 /g38 /g349 /g336 /g856 242{/.notdef}rp]
XURILJ+TTE25798A0t00 nf
XURILJ+TTE25798A0t00*1 [11.2584 0 0 -11.28 0 0 ]msf
221.76 578.764 mo
(\012\013\014\015\001\006)
[5.16017 2.76447 5.39862 2.99898 4.43913 0 ]xsh
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
248.28 578.764 mo
(\007\027\011!\001)
[3.47743 5.8755 3.47745 2.7655 0 ]xsh
gsave
309.84 569.884 mo
319.32 569.884 li
319.32 576.004 li
309.84 576.004 li
cp
clp
XURILH+Times-Roman*1 [5.3226 0 0 -5.33292 0 0 ]msf
309.84 574.684 mo
(31)
[5.16 0 ]xsh
grestore
%ADOBeginSubsetFont: ONKBAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILH+Times-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8707CDCC340460CEA5ADD57470B284F11F11D9BA6B6B
35C641C183CE2> |-
/four <1C60D8A8C9B7A73DC573E0FDE75419407F972C08C3639F0C2B88697D9
65911F927EC9BA1D198F0542C84E63BAAD35D5257F2E465BEACEDA053C385BE6
F65260697BDCE0DD0EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILH+Times-Roman /Encoding get
dup 46 /period put
dup 52 /four put
pop
%ADOEndSubsetFont
/XURILH+Times-Roman*1 
[44{/.notdef}rp /comma /.notdef /period /.notdef /zero /one /two 
/three /four 40{/.notdef}rp /bracketright 162{/.notdef}rp]
XURILH+Times-Roman nf
XURILH+Times-Roman*1 [5.3226 0 0 -5.33292 0 0 ]msf
282.36 581.284 mo
(1...4)
[2.76001 1.31998 1.31998 1.44 0 ]xsh
%ADOBeginSubsetFont: OOLBAA+Times-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILK+Times-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/i <1C60D8A8C9B854D0FB606664C7B7DE9A51FECF400AD33C33EBACB53A5B63
7293FF05C9A769A4750507EBC2869EBBEF22E040A7AA8F9CEFCB55D75E523761
04F728641D5098958E8A51CCFBC4258C196259B3634C4F000F8D1C13E7362148
55D716BEDB81172022AA387C754ECB8836277326517FA4C0F9A39E55110ECB85
4B09DC06B7667ECC764DC058> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILK+Times-Italic /Encoding get
dup 105 /i put
pop
%ADOEndSubsetFont
/XURILK+Times-Italic*1 
[105{/.notdef}rp /i /j 149{/.notdef}rp]
XURILK+Times-Italic nf
XURILK+Times-Italic*1 [5.3226 0 0 -5.33292 0 0 ]msf
269.16 574.684 mo
(j)sh
277.44 581.284 mo
(i)sh
gsave
312.36 569.404 mo
319.32 569.404 li
319.32 575.884 li
312.36 575.884 li
cp
clp
XURILM+Symbol*1 [5.3226 0 0 -5.33292 0 0 ]msf
312.36 574.684 mo
(\264)sh
grestore
XURILM+Symbol*1 [5.3226 0 0 -5.33292 0 0 ]msf
279.6 581.284 mo
(=)sh
gsave
294.36 569.524 mo
319.32 569.524 li
319.32 580.924 li
294.36 580.924 li
cp
clp
XURILM+Symbol*1 [9.20724 0 0 -9.225 0 0 ]msf
294.36 578.884 mo
(\316\302)
[7.79999 0 ]xsh
grestore
%ADOBeginSubsetFont: XOSAAA+Times-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILI+Times-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/v <1C60D8A8C9B7A73D33B8740B33501BFA00197E593377380929E8EBF7A78F
0B7A8E8DF255AD9EBAB1386AC440B19900815BC47956DA1CA11A61591B5A0DA5
4F29DB26C2839ECC682B0D46AB25EA38705885D4C2B0FFD6AAA6D33F8759329F
5F5481F3BB99847155DBCE7205229B92> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILI+Times-Bold /Encoding get
dup 118 /v put
pop
%ADOEndSubsetFont
/XURILI+Times-Bold*1 
[91{/.notdef}rp /bracketleft 18{/.notdef}rp /n 7{/.notdef}rp /v /.notdef /x 
135{/.notdef}rp]
XURILI+Times-Bold nf
XURILI+Times-Bold*1 [9.20724 0 0 -9.225 0 0 ]msf
272.4 578.884 mo
(v)sh
XURILG+TTE22082D8t00*1 [11.2584 0 0 -11.28 0 0 ]msf
319.32 578.764 mo
(\001\010\016\020\001\015 \021\013\020\001\022\021\017\016\001%\020\016\015\003\014\020\013\001\021\022\001\015 \020\001\013\020\014\015\003\021\023\001)
[2.51917 5.39999 3.96411 5.64499 4.19913 3.72052 5.87552 5.99606 4.43878 5.76495 4.07916 3.59793 
5.87607 5.87552 3.96411 4.19916 5.04379 5.64496 4.08414 3.72052 2.63449 4.80173 5.64499 4.43878 
4.31915 5.87601 3.59793 4.07916 3.72052 5.87552 5.76501 4.19913 4.43878 5.64499 4.8017 3.72055 
2.63449 5.87604 5.87555 0 ]xsh
110.52 595.204 mo
(\010\016\016\010\023\004\020\026\001\003\023\001\010\001\035\010\016\015\003\014\017\024\010\016\001\021\016\026\020\016\001\010\013\001\022\021\024\024\021\031\013"\001)
[5.4 3.96412 3.96413 5.39999 5.87553 5.28326 5.64497 5.87553 2.51913 2.63449 5.87553 2.51915 
5.51999 2.51913 5.75552 5.51999 3.84413 3.72052 2.63449 4.92172 5.75554 2.63451 5.39999 4.08412 
2.63913 5.87604 3.96413 5.87553 5.64496 3.96414 2.51913 5.39999 4.43877 2.39917 3.47794 5.99606 
2.63449 2.5145 5.99606 8.04169 4.43878 3.00479 0 ]xsh
110.52 618.484 mo
(\001)sh
235.2 163.684 mo
211.56 160.564 211.32 162.004 161.76 173.284 cv
147.36 176.524 129 180.604 120.24 177.244 cv
112.8 174.484 112.56 166.084 115.08 158.404 cv
122.16 136.444 151.2 119.044 195.96 112.324 cv
226.44 107.764 264.24 108.124 283.92 123.364 cv
295.68 132.484 300.96 146.764 297.84 155.404 cv
292.44 169.804 263.52 168.364 235.2 163.684 cv
.12137 .0931716 .0931716 0 cmyk
ef
.800688 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
235.2 163.684 mo
211.56 160.564 211.32 162.004 161.76 173.284 cv
147.36 176.524 129 180.604 120.24 177.244 cv
112.8 174.484 112.56 166.084 115.08 158.404 cv
122.16 136.444 151.2 119.044 195.96 112.324 cv
226.44 107.764 264.24 108.124 283.92 123.364 cv
295.68 132.484 300.96 146.764 297.84 155.404 cv
292.44 169.804 263.52 168.364 235.2 163.684 cv
cp
.750179 .679652 .670191 .901488 cmyk
@
195.72 27.2436 mo
213.96 29.1636 252.36 33.8436 272.28 48.0036 cv
289.08 60.0036 292.8 78.7236 281.28 85.6836 cv
274.8 89.6436 263.4 89.8836 253.56 87.1236 cv
245.76 84.8436 238.92 80.8836 231.72 78.0036 cv
213.96 70.9236 194.04 71.1636 177.48 71.6436 cv
166.32 71.8836 156.72 72.3636 148.44 69.0036 cv
134.28 63.3636 124.08 46.3236 132.24 36.0036 cv
139.68 26.5236 162.48 22.5636 195.72 27.2436 cv
.12137 .0931716 .0931716 0 cmyk
ef
195.72 27.2436 mo
213.96 29.1636 252.36 33.8436 272.28 48.0036 cv
289.08 60.0036 292.8 78.7236 281.28 85.6836 cv
274.8 89.6436 263.4 89.8836 253.56 87.1236 cv
245.76 84.8436 238.92 80.8836 231.72 78.0036 cv
213.96 70.9236 194.04 71.1636 177.48 71.6436 cv
166.32 71.8836 156.72 72.3636 148.44 69.0036 cv
134.28 63.3636 124.08 46.3236 132.24 36.0036 cv
139.68 26.5236 162.48 22.5636 195.72 27.2436 cv
cp
.750179 .679652 .670191 .901488 cmyk
@
315.72 151.204 mo
319.56 151.204 li
319.56 167.044 li
315.72 167.044 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -15.84 210.691 30.1197 ]ct
<<
/T 1
/W 32 
/H 132 
/M[32 0 0 -132 0 132 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-CYmnQ('SPG'/E%qmD$gti"IJAi.#bqGH#31DaTsLtEL\>,=FcEq^?U1*^L*"s2_2FM8S!fG%>N:k
#&K1b;Ikkq:(eHI']B]_ZWq%*Z_Y'D?i4l.)j3upOF>,X,?Dtu,4UL<JNGnnke_*8,'tmo~>

%%EndBinary
grestore
np
f
303.72 138.244 mo
307.56 138.244 li
307.56 157.684 li
303.72 157.684 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 198.691 43.0797 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
307.92 143.524 mo
317.52 143.524 li
317.52 168.364 li
307.92 168.364 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[9.6 0 0 -24.84 202.891 37.7997 ]ct
<<
/T 1
/W 80 
/H 207 
/M[80 0 0 -207 0 207 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-J9b)du&;K-e/6mK(Dc/3"PbW44H39UR84oEC1CRI?G/q(<9JC`\J?cAaZ*AdRZ1]MMKfp<*36@?E
8WGWM1o'LfOHtn@*]NJB2^-c%N^T--Oc6SG+%r=&B"_I"dnqMWI?j=:MC,Q.$:WdXETi%O8-^[[g([rG
-1iB[69S":[cBH12d)6FKN\p]SjEI\;Yd0kCZW1a0#B/.a]X4k:Qd!@Z7.9:]A&R5'Ycop^EMX"M"hsB
FALcp!7K$Kdf~>

%%EndBinary
grestore
np
f
gsave
222.72 141.244 mo
222.6 145.804 li
222.48 150.844 li
222.24 160.684 li
222.24 162.244 li
223.8 162.244 li
233.64 162.484 li
238.44 162.604 li
263.04 163.204 li
267.84 163.324 li
272.76 163.444 li
275.52 163.564 li
275.52 162.004 li
275.76 152.164 li
275.88 147.124 li
276 142.564 li
275.4 142.444 li
270.6 142.324 li
246 141.724 li
241.2 141.604 li
226.44 141.244 li
cp
eclp
.750179 .679652 .670191 .901488 cmyk
%ADOBeginSubsetFont: ONKBAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILH+Times-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C76FCF1DA4D86968C820C1AC714DCC217B6D4
918842E47D5835F9377A08864F0B413DE41481554239DC80E8FAC166F5D95783
7085C6E6DAB3F2A70C7BD1DA46154F3525C9E90348> |-
/parenright <1C60D8A8C9B81F2C3AE0CFA7597EBFA517709206961B78365E1
CC5ED86024F1B7499C23DB3603AFD99AB0DFB2842BDFCCC1E2C33DCD9A29B6DE
DA1EBBE890CD740B353D14EBDF479204E46C9625423> |-
/circumflex <1C60D8A8C9B81F2C34C7F83294F31D9AE7D92DB4ABA6ECD46A1
82877E4C2A92A1FDCE1C4F7538D754A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILH+Times-Roman /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 136 /circumflex put
pop
%ADOEndSubsetFont
/XURILH+Times-Roman*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef 
/zero /one /two /three /four 40{/.notdef}rp /bracketright 42{/.notdef}rp 
/circumflex 119{/.notdef}rp]
XURILH+Times-Roman nf
XURILH+Times-Roman*1 [13.3102 .325799 .324359 -13.297 0 0 ]msf
248.4 154.204 mo
(\210)sh
265.44 154.684 mo
(\210)sh
240.36 154.924 mo
(\()sh
257.4 155.284 mo
(\))sh
XURILK+Times-Italic*1 [7.695 .18792 .18756 -7.68756 0 0 ]msf
236.28 158.284 mo
(j)sh
253.2 158.644 mo
(j)sh
270.24 159.004 mo
(j)sh
%ADOBeginSubsetFont: BMGBAA+TTE25F6AE8t00 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
XURILL+TTE25F6AE8t00 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g50 <1C60D8A8C9B68E60CF769B1B2C78433C3B17458DA397A7AD73E6EA4BDC
1FCB973750425E7121C86E6114FA77221A4D403B4FDFA63689464A681537E91B
A154F721D45325119D99F7BD64C7A32CEFABCD315B799866B8DD60EC9C3C521A
2C5FC10F83C4C33337A804EFAAE9A6F622ADDCB0D68D1684FB8343610ADC8B1C
38A87151B8C52903324B1D1990098493FA7B6BDAA402B05FD4435B40259C477C
EC612A95B32E6334689E2296E3DCC3905D56B5C5137A27D0683F69333B822D50
EE045868577AD4052578B780FF2460B0604B7DA2FA2DC8B5CACD0CCEE15DEA4E
64DA943DCBE882E454892C1776B3AFCBA3AA60E6F17C9E136C32A9542D1B7CF3
CAE570F96925FBC84135FA0A7C8E81FB90FC8DEA3292E49873E5C5F4482FCE8B
3873C03A2E08D8C537948F1A026952E4A2C719984B448C6838AD6B5BFA1241AD
A25E2110C7545CFA8BC43BBE506BD964B1DE1A12ED647FB7C1CDAA24634B76B0
53672C9C68D2B7234B3AEC15694FE7152514016E3145F6C6C58651E16CE524C6
A059984CF072DE501354B4E0650289D0723A5235BA53970DEEAD7466BA2F141C
0781D1D73DF97B2D4C1B4F39A4C1AF1EE7425D93CE8EE8F8B9F4C5B68AF65A41
B8C9DB676976FDE1FCD137F60C548D2E59E31B2582A90ED54142D6018112DF18
8A9963CF405E9115E216476A8BB75173C27B6CFCFBD4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XURILL+TTE25F6AE8t00 /Encoding get
dup 3 /g50 put
pop
%ADOEndSubsetFont
/XURILL+TTE25F6AE8t00*1 
[/.notdef /g48 /g45 /g50 252{/.notdef}rp]
XURILL+TTE25F6AE8t00 nf
XURILL+TTE25F6AE8t00*1 [13.3102 .325799 .324359 -13.297 0 0 ]msf
223.8 154.444 mo
(\003)sh
XURILM+Symbol*1 [13.3102 .3258 4.87692 -13.1855 0 0 ]msf
245.759 155.044 mo
(r)sh
262.799 155.404 mo
(r)sh
245.519 155.283 mo
(r)sh
262.559 155.643 mo
(r)sh
245.759 155.283 mo
(r)sh
262.799 155.643 mo
(r)sh
245.519 155.044 mo
(r)sh
262.559 155.404 mo
(r)sh
grestore
298.44 144.244 mo
287.76 71.0436 li
.750179 .679652 .670191 .901488 cmyk
@
206.64 47.7636 mo
207.6 45.8436 li
210.84 47.2836 li
210.48 47.2836 li
213.72 45.8436 li
214.68 47.7636 li
212.4 48.8436 li
212.4 48.0036 li
214.68 49.0836 li
213.72 51.0036 li
210.48 49.5636 li
210.84 49.5636 li
207.6 51.0036 li
206.64 49.0836 li
208.92 48.0036 li
208.92 48.8436 li
206.64 47.7636 li
cp
210 48.3636 mo
207.36 49.6836 li
207.6 49.0836 li
208.08 50.2836 li
207.6 50.1636 li
210.6 48.7236 li
213.72 50.1636 li
213.12 50.2836 li
213.72 49.0836 li
213.96 49.6836 li
211.32 48.3636 li
213.96 47.1636 li
213.72 47.7636 li
213.12 46.5636 li
213.72 46.6836 li
210.6 48.1236 li
207.6 46.6836 li
208.08 46.5636 li
207.6 47.7636 li
207.36 47.1636 li
210 48.3636 li
ef
.051036 lw
206.64 47.7636 mo
207.6 45.8436 li
210.84 47.2836 li
210.48 47.2836 li
213.72 45.8436 li
214.68 47.7636 li
212.4 48.8436 li
212.4 48.0036 li
214.68 49.0836 li
213.72 51.0036 li
210.48 49.5636 li
210.84 49.5636 li
207.6 51.0036 li
206.64 49.0836 li
208.92 48.0036 li
208.92 48.8436 li
206.64 47.7636 li
cp
@
210 48.3636 mo
207.36 49.6836 li
207.6 49.0836 li
208.08 50.2836 li
207.6 50.1636 li
210.6 48.7236 li
213.72 50.1636 li
213.12 50.2836 li
213.72 49.0836 li
213.96 49.6836 li
211.32 48.3636 li
213.96 47.1636 li
213.72 47.7636 li
213.12 46.5636 li
213.72 46.6836 li
210.6 48.1236 li
207.6 46.6836 li
208.08 46.5636 li
207.6 47.7636 li
207.36 47.1636 li
210 48.3636 li
cp
@
.800688 lw
114.12 162.364 mo
129.36 43.6836 li
@
201.24 137.164 mo
202.08 135.244 li
205.32 136.804 li
204.96 136.804 li
208.32 135.244 li
209.16 137.164 li
207 138.244 li
207 137.524 li
209.16 138.604 li
208.32 140.524 li
204.96 138.964 li
205.32 138.964 li
202.08 140.524 li
201.24 138.604 li
203.4 137.524 li
203.4 138.244 li
201.24 137.164 li
cp
204.6 137.884 mo
201.96 139.084 li
202.08 138.604 li
202.68 139.804 li
202.08 139.564 li
205.2 138.124 li
208.32 139.564 li
207.72 139.804 li
208.32 138.604 li
208.44 139.084 li
205.8 137.884 li
208.44 136.684 li
208.32 137.164 li
207.72 135.964 li
208.32 136.204 li
205.2 137.644 li
202.08 136.204 li
202.68 135.964 li
202.08 137.164 li
201.96 136.684 li
204.6 137.884 li
ef
.051036 lw
201.24 137.164 mo
202.08 135.244 li
205.32 136.804 li
204.96 136.804 li
208.32 135.244 li
209.16 137.164 li
207 138.244 li
207 137.524 li
209.16 138.604 li
208.32 140.524 li
204.96 138.964 li
205.32 138.964 li
202.08 140.524 li
201.24 138.604 li
203.4 137.524 li
203.4 138.244 li
201.24 137.164 li
cp
@
204.6 137.884 mo
201.96 139.084 li
202.08 138.604 li
202.68 139.804 li
202.08 139.564 li
205.2 138.124 li
208.32 139.564 li
207.72 139.804 li
208.32 138.604 li
208.44 139.084 li
205.8 137.884 li
208.44 136.684 li
208.32 137.164 li
207.72 135.964 li
208.32 136.204 li
205.2 137.644 li
202.08 136.204 li
202.68 135.964 li
202.08 137.164 li
201.96 136.684 li
204.6 137.884 li
cp
@
.800688 lw
210.6 48.7236 mo
287.76 71.0436 li
@
282.48 72.0036 mo
287.76 71.0436 li
283.92 67.4436 li
@
289.8 71.0436 mo
289.8 69.8436 288.84 69.0036 287.76 69.0036 cv
286.56 69.0036 285.6 69.8436 285.6 71.0436 cv
285.6 72.2436 286.56 73.2036 287.76 73.2036 cv
288.84 73.2036 289.8 72.2436 289.8 71.0436 cv
ef
289.8 71.0436 mo
289.8 69.8436 288.84 69.0036 287.76 69.0036 cv
286.56 69.0036 285.6 69.8436 285.6 71.0436 cv
285.6 72.2436 286.56 73.2036 287.76 73.2036 cv
288.84 73.2036 289.8 72.2436 289.8 71.0436 cv
cp
@
300.36 144.124 mo
300.36 143.044 299.4 142.084 298.2 142.084 cv
297 142.084 296.04 143.044 296.04 144.124 cv
296.04 145.324 297 146.284 298.2 146.284 cv
299.4 146.284 300.36 145.324 300.36 144.124 cv
ef
300.36 144.124 mo
300.36 143.044 299.4 142.084 298.2 142.084 cv
297 142.084 296.04 143.044 296.04 144.124 cv
296.04 145.324 297 146.284 298.2 146.284 cv
299.4 146.284 300.36 145.324 300.36 144.124 cv
cp
@
317.16 67.3236 mo
317.16 66.2436 316.2 65.2836 315 65.2836 cv
313.8 65.2836 312.84 66.2436 312.84 67.3236 cv
312.84 68.5236 313.8 69.4836 315 69.4836 cv
316.2 69.4836 317.16 68.5236 317.16 67.3236 cv
ef
317.16 67.3236 mo
317.16 66.2436 316.2 65.2836 315 65.2836 cv
313.8 65.2836 312.84 66.2436 312.84 67.3236 cv
312.84 68.5236 313.8 69.4836 315 69.4836 cv
316.2 69.4836 317.16 68.5236 317.16 67.3236 cv
cp
@
[2.40208 2.40208 ] 0 dsh
210 48.3636 mo
314.88 67.3236 li
@
205.2 138.124 mo
313.08 68.4036 li
@
205.2 137.644 mo
210.6 48.1236 li
@
[] 0 dsh
205.8 137.884 mo
299.16 144.364 li
@
294.24 146.404 mo
299.16 144.364 li
294.6 141.604 li
@
297.72 66.6036 mo
300.6 66.6036 li
300.6 82.8036 li
297.72 82.8036 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[2.88 0 0 -16.2 192.691 114.72 ]ct
<<
/T 1
/W 24 
/H 135 
/M[24 0 0 -135 0 135 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-EYmnQ(&4"WmEo@M^<&c+uUklr=)'NPu,^VA/iXoG,3;Ei:&.HD,X$?OZ(+QS!QHYVR$6.c/L>,5n
nMiojUuOO&`K]$3,G/ru#r32sO5')J>0mkP6jM<r^0Rje.q3f(]`nHbo-IT~>

%%EndBinary
grestore
np
f
285.48 53.7636 mo
289.32 53.7636 li
289.32 73.2036 li
285.48 73.2036 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 180.451 127.56 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
289.56 59.0436 mo
299.16 59.0436 li
299.16 83.8836 li
289.56 83.8836 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[9.6 0 0 -24.84 184.531 122.28 ]ct
<<
/T 1
/W 80 
/H 207 
/M[80 0 0 -207 0 207 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-J9b)du&;K-e/6mK(Dc/3"PbW44H39UR84oEC1CRI?G/q(<9JC`\J?cAaZ*AdRZ1]MMKfp<*36@?E
8WGWM1o'LfOHtn@*]NJB2^-c%N^T--Oc6SG+%r=&B"_I"dnqMWI?j=:MC,Q.$:WdXETi%O8-^[[g([rG
-1iB[69S":[cBH12d)6FKN\p]SjEI\;Yd0kCZW1a0#B/.a]X4k:Qd!@Z7.9:]A&R5'Ycop^EMX"M"hsB
FALcp!7K$Kdf~>

%%EndBinary
grestore
np
f
310.32 55.2036 mo
318 55.2036 li
318 76.4436 li
310.32 76.4436 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[7.68 0 0 -21.24 205.291 126.12 ]ct
<<
/T 1
/W 64 
/H 177 
/M[64 0 0 -177 0 177 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-J_%":)$jG"=3,m(GbpL\=4[]_uFJQ36)1c9-;;;[?M)mu"q!o]7rIk6S]'?;F.?T#mOjY6qH^_Sm
h?b-1m/`O<##*P^(sO3bNWC<N%/;m@9n4afM3UR,)!Y:42Xb-]&)>BKW\IcV<^Vd*odu2^:U?U9PP'-0
gS]%H(3aGsLPs/<IW_CZ>q\6758O"Y7Z@dIoh"1kDDAaR(0=\pL=KaGMgO/.(OJ%>5YZAA/KEppNq0B,
B<h=S!&H7K*W~>

%%EndBinary
grestore
np
f
199.68 20.1636 mo
203.52 20.1636 li
203.52 39.6036 li
199.68 39.6036 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 94.6512 161.16 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
203.88 20.4036 mo
208.68 20.4036 li
208.68 32.6436 li
203.88 32.6436 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[4.8 0 0 -12.24 98.8512 160.92 ]ct
<<
/T 1
/W 40 
/H 102 
/M[40 0 0 -102 0 102 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^8Co#H18m#D*%cK%_OR"opA6+aF~>

%%EndBinary
grestore
np
f
208.92 19.6836 mo
211.8 19.6836 li
211.8 35.5236 li
208.92 35.5236 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[2.88 0 0 -15.84 103.891 161.64 ]ct
<<
/T 1
/W 24 
/H 132 
/M[24 0 0 -132 0 132 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^2&Os$$Vc*sVEL%*W+t#XLZl(uV=sL?]TmlsN@*NZ&c0@>Oj^!\loi+h43fO:;'i6LoUCR"5Z+
^];Km+ee~>

%%EndBinary
grestore
np
f
184.56 9.0036 mo
202.8 9.0036 li
202.8 44.6436 li
184.56 44.6436 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[18.24 0 0 -35.64 79.5312 172.32 ]ct
<<
/T 1
/W 152 
/H 297 
/M[152 0 0 -297 0 297 ]
/BC 1 
/D[1 0 ]
/DS [cf /ASCII85Decode fl dup<</K -1 /Columns 152 >>/CCITTFaxDecode fl]
/O 1
>>
%%BeginBinary: 1
img
-D?M)s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s7.E<(_)0m1>TU3
Xnaht5et)B((:rq<Z9]#\)1rSh)F3jgYVt>hu;NF^$l!g2YXudmJFNPs8TP$n+H\;]=m\/0#-e_\$uD;
[f*7N]jL[:[bflus8LdI[sRlKs.nE:mGIs@Dr0==hu!G^qg3PQs%U7TGJAXrrnI1VHiNt]g:)FZs1eGL
hVIZ#mJZF]^OP_K9tu%!^]1eBfg,9+s*rpc^&FMqhtI$I^V*k%]Hn'q_;mA*=VP/VJ-Z.*~>
%%EndBinary
grestore
np
f
210.84 47.2836 mo
219.36 7.32361 li
.750179 .679652 .670191 .901488 cmyk
@
220.68 12.6036 mo
219.36 7.32361 li
216 11.5236 li
@
205.2 137.644 mo
194.16 84.7236 li
@
197.52 88.9236 mo
194.16 84.7236 li
192.84 89.8836 li
@
188.52 104.284 mo
192.36 104.284 li
192.36 123.724 li
188.52 123.724 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 83.4912 77.0397 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
173.52 93.2436 mo
191.76 93.2436 li
191.76 128.884 li
173.52 128.884 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[18.24 0 0 -35.64 68.4912 88.0797 ]ct
<<
/T 1
/W 152 
/H 297 
/M[152 0 0 -297 0 297 ]
/BC 1 
/D[1 0 ]
/DS [cf /ASCII85Decode fl dup<</K -1 /Columns 152 >>/CCITTFaxDecode fl]
/O 1
>>
%%BeginBinary: 1
img
-D?M)s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s7.E<(_)0m1>TU3
Xnaht5et)B((:rq<Z9]#\)1rSh)F3jgYVt>hu;NF^$l!g2YXudmJFNPs8TP$n+H\;]=m\/0#-e_\$uD;
[f*7N]jL[:[bflus8LdI[sRlKs.nE:mGIs@Dr0==hu!G^qg3PQs%U7TGJAXrrnI1VHiNt]g:)FZs1eGL
hVIZ#mJZF]^OP_K9tu%!^]1eBfg,9+s*rpc^&FMqhtI$I^V*k%]Hn'q_;mA*=VP/VJ-Z.*~>
%%EndBinary
grestore
np
f
193.44 52.8036 mo
197.28 52.8036 li
197.28 72.2436 li
193.44 72.2436 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 88.4112 128.52 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
197.64 53.0436 mo
202.44 53.0436 li
202.44 65.2836 li
197.64 65.2836 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[4.8 0 0 -12.24 92.6112 128.28 ]ct
<<
/T 1
/W 40 
/H 102 
/M[40 0 0 -102 0 102 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^8Co#H18m#D*%cK%_OR"opA6+aF~>

%%EndBinary
grestore
np
f
202.68 52.3236 mo
205.56 52.3236 li
205.56 68.1636 li
202.68 68.1636 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[2.88 0 0 -15.84 97.6512 129 ]ct
<<
/T 1
/W 24 
/H 132 
/M[24 0 0 -132 0 132 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^2&Os$$Vc*sVEL%*W+t#XLZl(uV=sL?]TmlsN@*NZ&c0@>Oj^!\loi+h43fO:;'i6LoUCR"5Z+
^];Km+ee~>

%%EndBinary
grestore
np
f
185.64 41.6436 mo
198.12 41.6436 li
198.12 77.2836 li
185.64 77.2836 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[12.48 0 0 -35.64 80.6112 139.68 ]ct
<<
/T 1
/W 104 
/H 297 
/M[104 0 0 -297 0 297 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-M5n\em$jBHE(G%Ru8)\-+1lfEb>e4lJ-'/C7>Gg0;DsWsR@Jm!&8g9Bg,SGr%o"P4LndRX.Nc^IH
_%UF2K4+e(L8cm.D""&^i>S?niEI94E%PH#F,+<,B-UgbVF)?=g#>$mh-m,T?d#m*PfNG'29L012lf6C
O[l4Q/_uX@e[0#BY:gP#e@84Sl4pM"N'gDnVI1p1]P4q6EY&7DV,>X>H'$@MB"/7D#[HWL+ne_<bLl8c
\a0]Zihq-XCB5Zq2LE@]W,+e6Rr9ufM#=]#&H0BU^';:=oY_D[>sc4>fDea^8K+TL.pqX=qj&;p"TSQ&
rrW6)*lOl~>

%%EndBinary
grestore
np
f
gsave
211.8 51.1236 mo
211.68 51.4836 li
211.56 52.0836 li
211.44 52.5636 li
211.32 53.1636 li
211.2 53.6436 li
210.96 54.8436 li
210.84 55.3236 li
210.72 55.9236 li
210.6 56.4036 li
210.48 57.0036 li
210.36 57.4836 li
210.24 58.0836 li
210.12 58.5636 li
210 59.1636 li
209.88 59.6436 li
209.76 60.2436 li
209.64 60.7236 li
209.52 61.3236 li
209.4 61.8036 li
209.28 62.4036 li
209.16 62.8836 li
209.04 63.4836 li
208.92 63.9636 li
208.8 64.5636 li
208.68 65.0436 li
208.56 65.6436 li
208.44 66.1236 li
208.32 66.7236 li
208.2 67.2036 li
207.96 68.4036 li
207.84 68.8836 li
207.72 69.4836 li
207.6 69.9636 li
207.48 70.5636 li
207.36 71.0436 li
207.24 71.6436 li
207.36 71.7636 li
207.84 71.8836 li
208.44 72.0036 li
208.92 72.1236 li
209.52 72.2436 li
210 72.3636 li
210.6 72.4836 li
211.08 72.6036 li
211.68 72.7236 li
212.16 72.8436 li
213.36 73.0836 li
213.84 73.2036 li
214.44 73.3236 li
214.92 73.4436 li
215.52 73.5636 li
216 73.6836 li
216.6 73.8036 li
217.08 73.9236 li
217.68 74.0436 li
218.16 74.1636 li
218.76 74.2836 li
219.24 74.4036 li
219.84 74.5236 li
220.32 74.6436 li
220.92 74.7636 li
221.4 74.8836 li
222 75.0036 li
222.48 75.1236 li
223.08 75.2436 li
223.56 75.3636 li
224.16 75.4836 li
224.64 75.6036 li
225.24 75.7236 li
225.72 75.8436 li
226.32 75.9636 li
226.8 76.0836 li
227.4 76.2036 li
227.88 76.3236 li
228.48 76.4436 li
228.96 76.5636 li
229.56 76.6836 li
230.04 76.8036 li
230.64 76.9236 li
231.12 77.0436 li
231.72 77.1636 li
232.2 77.2836 li
232.8 77.4036 li
233.28 77.5236 li
233.88 77.6436 li
234.36 77.7636 li
234.96 77.8836 li
235.44 78.0036 li
236.04 78.1236 li
236.52 78.2436 li
237.12 78.3636 li
237.6 78.4836 li
238.2 78.6036 li
238.68 78.7236 li
239.28 78.8436 li
239.76 78.9636 li
240.36 79.0836 li
240.84 79.2036 li
241.44 79.3236 li
241.92 79.4436 li
242.52 79.5636 li
243 79.6836 li
243.6 79.8036 li
244.08 79.9236 li
244.68 80.0436 li
245.16 80.1636 li
245.76 80.2836 li
246.24 80.4036 li
246.84 80.5236 li
247.32 80.6436 li
247.92 80.7636 li
248.4 80.8836 li
249 81.0036 li
249.48 81.1236 li
250.08 81.2436 li
250.56 81.3636 li
251.16 81.4836 li
251.64 81.6036 li
252.24 81.7236 li
252.72 81.8436 li
253.32 81.9636 li
253.8 82.0836 li
254.4 82.2036 li
254.88 82.3236 li
255.48 82.4436 li
255.96 82.5636 li
256.56 82.6836 li
257.04 82.8036 li
257.64 82.9236 li
258.12 83.0436 li
258.72 83.1636 li
259.2 83.2836 li
259.8 83.4036 li
260.28 83.5236 li
260.88 83.6436 li
261.36 83.7636 li
261.96 83.8836 li
262.44 84.0036 li
263.04 84.1236 li
263.52 84.2436 li
264.12 84.3636 li
264.6 84.4836 li
265.2 84.6036 li
265.68 84.7236 li
266.28 84.8436 li
266.76 84.9636 li
267.36 85.0836 li
267.84 85.2036 li
268.44 85.3236 li
268.92 85.4436 li
269.52 85.5636 li
270 85.6836 li
270.6 85.8036 li
271.08 85.9236 li
271.68 86.0436 li
272.16 86.1636 li
272.76 86.2836 li
273.24 86.4036 li
273.84 86.5236 li
274.32 86.6436 li
274.92 86.7636 li
275.4 86.8836 li
276 87.0036 li
276.48 87.1236 li
277.08 87.2436 li
277.56 87.3636 li
278.16 87.4836 li
278.64 87.6036 li
279.24 87.7236 li
279.72 87.8436 li
280.32 87.9636 li
280.8 88.0836 li
280.92 88.2036 li
280.92 88.0836 li
281.04 87.4836 li
281.16 87.0036 li
281.4 85.8036 li
281.52 85.3236 li
281.64 84.7236 li
281.76 84.2436 li
281.88 83.6436 li
282 83.1636 li
282.12 82.5636 li
282.24 82.0836 li
282.36 81.4836 li
282.48 81.0036 li
282.6 80.4036 li
282.72 79.9236 li
282.84 79.3236 li
282.96 78.8436 li
283.08 78.2436 li
283.2 77.7636 li
283.32 77.1636 li
283.44 76.6836 li
283.56 76.0836 li
283.68 75.6036 li
283.8 75.0036 li
283.92 74.5236 li
284.04 73.9236 li
284.16 73.4436 li
284.28 72.8436 li
284.4 72.3636 li
284.64 71.1636 li
284.76 70.6836 li
284.88 70.0836 li
285 69.6036 li
285.12 69.0036 li
285.24 68.5236 li
285.36 67.9236 li
285.48 67.5636 li
285.36 67.4436 li
284.88 67.3236 li
284.28 67.2036 li
283.8 67.0836 li
283.2 66.9636 li
282.72 66.8436 li
282.12 66.7236 li
281.64 66.6036 li
281.04 66.4836 li
280.56 66.3636 li
279.96 66.2436 li
279.48 66.1236 li
278.88 66.0036 li
278.4 65.8836 li
277.8 65.7636 li
277.32 65.6436 li
276.72 65.5236 li
276.24 65.4036 li
275.64 65.2836 li
275.16 65.1636 li
274.56 65.0436 li
274.08 64.9236 li
273.48 64.8036 li
273 64.6836 li
272.4 64.5636 li
271.92 64.4436 li
271.32 64.3236 li
270.84 64.2036 li
270.24 64.0836 li
269.76 63.9636 li
269.16 63.8436 li
268.68 63.7236 li
268.08 63.6036 li
267.6 63.4836 li
267 63.3636 li
266.52 63.2436 li
265.92 63.1236 li
265.44 63.0036 li
264.84 62.8836 li
264.36 62.7636 li
263.76 62.6436 li
263.28 62.5236 li
262.68 62.4036 li
262.2 62.2836 li
261.6 62.1636 li
261.12 62.0436 li
260.52 61.9236 li
260.04 61.8036 li
259.44 61.6836 li
258.96 61.5636 li
258.36 61.4436 li
257.88 61.3236 li
257.28 61.2036 li
256.8 61.0836 li
256.2 60.9636 li
255.72 60.8436 li
255.12 60.7236 li
254.64 60.6036 li
254.04 60.4836 li
253.56 60.3636 li
252.96 60.2436 li
252.48 60.1236 li
251.88 60.0036 li
251.4 59.8836 li
250.8 59.7636 li
250.32 59.6436 li
249.72 59.5236 li
249.24 59.4036 li
248.64 59.2836 li
248.16 59.1636 li
247.56 59.0436 li
247.08 58.9236 li
246.48 58.8036 li
246 58.6836 li
245.4 58.5636 li
244.92 58.4436 li
244.32 58.3236 li
243.84 58.2036 li
243.24 58.0836 li
242.76 57.9636 li
242.16 57.8436 li
241.68 57.7236 li
241.08 57.6036 li
240.6 57.4836 li
240 57.3636 li
239.52 57.2436 li
238.92 57.1236 li
238.44 57.0036 li
237.84 56.8836 li
237.36 56.7636 li
236.76 56.6436 li
236.28 56.5236 li
235.68 56.4036 li
235.2 56.2836 li
234.6 56.1636 li
234.12 56.0436 li
233.52 55.9236 li
233.04 55.8036 li
232.44 55.6836 li
231.96 55.5636 li
231.36 55.4436 li
230.88 55.3236 li
230.28 55.2036 li
229.8 55.0836 li
229.2 54.9636 li
228.72 54.8436 li
228.12 54.7236 li
227.64 54.6036 li
227.04 54.4836 li
226.56 54.3636 li
225.96 54.2436 li
225.48 54.1236 li
224.88 54.0036 li
224.4 53.8836 li
223.8 53.7636 li
223.32 53.6436 li
222.72 53.5236 li
222.24 53.4036 li
221.64 53.2836 li
221.16 53.1636 li
220.56 53.0436 li
220.08 52.9236 li
219.48 52.8036 li
219 52.6836 li
218.4 52.5636 li
217.92 52.4436 li
217.32 52.3236 li
216.84 52.2036 li
216.24 52.0836 li
215.76 51.9636 li
215.16 51.8436 li
214.68 51.7236 li
214.08 51.6036 li
213.6 51.4836 li
213 51.3636 li
212.52 51.2436 li
211.92 51.1236 li
cp
eclp
.750179 .679652 .670191 .901488 cmyk
XURILH+Times-Roman*1 [7.53611 1.67291 1.66824 -7.53755 0 0 ]msf
228.48 72.0038 mo
(1)sh
252.36 77.2837 mo
(1)sh
276.36 82.6837 mo
(1)sh
XURILH+Times-Roman*1 [13.0355 2.89453 2.88565 -13.0378 0 0 ]msf
241.8 70.5638 mo
(\210)sh
265.8 75.9639 mo
(\210)sh
233.76 69.7239 mo
(\()sh
257.76 75.0039 mo
(\))sh
XURILK+Times-Italic*1 [7.53611 1.67291 1.66824 -7.53755 0 0 ]msf
221.76 70.5638 mo
(j)sh
245.76 75.8438 mo
(j)sh
269.76 81.1238 mo
(j)sh
XURILM+Symbol*1 [7.53611 1.67291 1.66824 -7.53755 0 0 ]msf
224.52 71.1638 mo
(+)sh
248.52 76.4438 mo
(+)sh
272.52 81.8437 mo
(+)sh
XURILL+TTE25F6AE8t00*1 [13.0355 2.89453 2.88565 -13.0378 0 0 ]msf
210.24 64.4438 mo
(\003)sh
XURILM+Symbol*1 [13.0355 2.89451 7.34387 -12.0477 0 0 ]msf
239.159 70.8038 mo
(r)sh
263.159 76.0838 mo
(r)sh
238.919 71.0433 mo
(r)sh
262.919 76.3233 mo
(r)sh
239.159 71.0433 mo
(r)sh
263.159 76.3233 mo
(r)sh
238.919 70.8038 mo
(r)sh
262.919 76.0837 mo
(r)sh
grestore
194.88 144.364 mo
198.72 144.364 li
198.72 163.804 li
194.88 163.804 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 89.8512 36.9597 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
187.2 133.204 mo
199.68 133.204 li
199.68 168.844 li
187.2 168.844 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[12.48 0 0 -35.64 82.1712 48.1197 ]ct
<<
/T 1
/W 104 
/H 297 
/M[104 0 0 -297 0 297 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-M5n\em$jBHE(G%Ru8)\-+1lfEb>e4lJ-'/C7>Gg0;DsWsR@Jm!&8g9Bg,SGr%o"P4LndRX.Nc^IH
_%UF2K4+e(L8cm.D""&^i>S?niEI94E%PH#F,+<,B-UgbVF)?=g#>$mh-m,T?d#m*PfNG'29L012lf6C
O[l4Q/_uX@e[0#BY:gP#e@84Sl4pM"N'gDnVI1p1]P4q6EY&7DV,>X>H'$@MB"/7D#[HWL+ne_<bLl8c
\a0]Zihq-XCB5Zq2LE@]W,+e6Rr9ufM#=]#&H0BU^';:=oY_D[>sc4>fDea^8K+TL.pqX=qj&;p"TSQ&
rrW6)*lOl~>

%%EndBinary
grestore
np
f
143.04 47.5236 mo
146.88 47.5236 li
146.88 66.9636 li
143.04 66.9636 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 38.0112 133.8 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
147.24 47.7636 mo
152.04 47.7636 li
152.04 60.0036 li
147.24 60.0036 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[4.8 0 0 -12.24 42.2112 133.56 ]ct
<<
/T 1
/W 40 
/H 102 
/M[40 0 0 -102 0 102 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^8Co#H18m#D*%cK%_OR"opA6+aF~>

%%EndBinary
grestore
np
f
152.16 47.0436 mo
155.04 47.0436 li
155.04 62.8836 li
152.16 62.8836 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[2.88 0 0 -15.84 47.1312 134.28 ]ct
<<
/T 1
/W 24 
/H 132 
/M[24 0 0 -132 0 132 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^2&Os$$Vc*sVEL%*W+t#XLZl(uV=sL?]TmlsN@*NZ&c0@>Oj^!\loi+h43fO:;'i6LoUCR"5Z+
^];Km+ee~>

%%EndBinary
grestore
np
f
134.16 35.4036 mo
145.68 35.4036 li
145.68 72.4836 li
134.16 72.4836 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[11.52 0 0 -37.08 29.1312 145.92 ]ct
<<
/T 1
/W 96 
/H 309 
/M[96 0 0 -309 0 309 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb",bbA"mK'La=\nBran5V8c3K3CkJ!DR:":0`C:?3n=0^5kKd08=9Ucs;S?Su;HL891l4WMukrWMul]
c`3mPk_U]<LWZYQ5ndbKS@9'Xh$G/:R1!gY$"%'of:RV=M2Q1uiY+4?ibdMoR3ZGDf5K6(g!nZb)I*&S
Q8Mm$V3Z@6T4.ba2Gg(:(KfGhFL8C3g\s/d8gmcrT6W.4DE-u-^?'UcZZ5gFe![-6_!-9=NT6KJcFhDO
\E:ho%qf94Ed,dcIQp%EG5KrC[@%Er`NB\lYd<.#'IVZl:WC(*<\Icl*"),&1_:%l0#aZ=.7um.U*THj
TQ_1,9*0Q4e22]h(l8DtXo1\)d!IQV8b=LXhNkSCme"cG_Em%Nd:lDd*i28"pQ,u+[`?\o\:K?]~>

%%EndBinary
grestore
np
f
133.32 167.524 mo
137.16 167.524 li
137.16 186.964 li
133.32 186.964 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 28.2912 13.7997 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
122.04 155.524 mo
133.56 155.524 li
133.56 192.604 li
122.04 192.604 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[11.52 0 0 -37.08 17.0112 25.7997 ]ct
<<
/T 1
/W 96 
/H 309 
/M[96 0 0 -309 0 309 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb",bbA"mK'La=\nBran5V8c3K3CkJ!DR:":0`C:?3n=0^5kKd08=9Ucs;S?Su;HL891l4WMukrWMul]
c`3mPk_U]<LWZYQ5ndbKS@9'Xh$G/:R1!gY$"%'of:RV=M2Q1uiY+4?ibdMoR3ZGDf5K6(g!nZb)I*&S
Q8Mm$V3Z@6T4.ba2Gg(:(KfGhFL8C3g\s/d8gmcrT6W.4DE-u-^?'UcZZ5gFe![-6_!-9=NT6KJcFhDO
\E:ho%qf94Ed,dcIQp%EG5KrC[@%Er`NB\lYd<.#'IVZl:WC(*<\Icl*"),&1_:%l0#aZ=.7um.U*THj
TQ_1,9*0Q4e22]h(l8DtXo1\)d!IQV8b=LXhNkSCme"cG_Em%Nd:lDd*i28"pQ,u+[`?\o\:K?]~>

%%EndBinary
grestore
np
f
469.08 169.204 mo
469.08 168.364 469.92 167.644 471.12 167.644 cv
471.12 167.644 li
472.2 167.644 473.16 168.364 473.16 169.204 cv
473.16 169.204 li
473.16 170.164 472.2 170.884 471.12 170.884 cv
471.12 170.884 li
469.92 170.884 469.08 170.164 469.08 169.204 cv
469.08 169.204 li
.750179 .679652 .670191 .901488 cmyk
ef
341.28 41.1636 mo
423.84 62.2836 li
445.08 146.764 li
336.48 159.124 li
341.28 41.1636 li
.315618 .251957 .256565 0 cmyk
ef
.759444 lw
341.28 41.1636 mo
423.84 62.2836 li
445.08 146.764 li
336.48 159.124 li
341.28 41.1636 li
cp
.750179 .679652 .670191 .901488 cmyk
@
443.4 146.884 mo
443.4 146.044 444 145.324 444.84 145.324 cv
444.84 145.324 li
445.8 145.324 446.4 146.044 446.4 146.884 cv
446.4 146.884 li
446.4 147.724 445.8 148.324 444.84 148.324 cv
444.84 148.324 li
444 148.324 443.4 147.724 443.4 146.884 cv
443.4 146.884 li
ef
422.76 61.9236 mo
422.76 61.0836 423.48 60.4836 424.32 60.4836 cv
424.32 60.4836 li
425.16 60.4836 425.76 61.0836 425.76 61.9236 cv
425.76 61.9236 li
425.76 62.7636 425.16 63.3636 424.32 63.3636 cv
424.32 63.3636 li
423.48 63.3636 422.76 62.7636 422.76 61.9236 cv
422.76 61.9236 li
ef
447.6 23.7636 mo
449.52 23.7636 li
449.52 39.6036 li
447.6 39.6036 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[1.92 0 0 -15.84 342.571 157.56 ]ct
<<
/T 1
/W 16 
/H 132 
/M[16 0 0 -132 0 132 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(g<U35Q;8f&'PQ_!KTIDIj"cAr;kp\L'59l%)=9t~>

%%EndBinary
grestore
np
f
439.8 18.8436 mo
447.48 18.8436 li
447.48 40.0836 li
439.8 40.0836 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[7.68 0 0 -21.24 334.771 162.48 ]ct
<<
/T 1
/W 64 
/H 177 
/M[64 0 0 -177 0 177 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-J_%":)$jG"=3,m(GbpL\=4[]_uFJQ36)1c9-;;;[?M)mu"q!o]7rIk6S]'?;F.?T#mOjY6qH^_Sm
h?b-1m/`O<##*P^(sO3bNWC<N%/;m@9n4afM3UR,)!Y:42Xb-]&)>BKW\IcV<^Vd*odu2^:U?U9PP'-0
gS]%H(3aGsLPs/<IW_CZ>q\6758O"Y7Z@dIoh"1kDDAaR(0=\pL=KaGMgO/.(OJ%>5YZAA/KEppNq0B,
B<h=S!&H7K*W~>

%%EndBinary
grestore
np
f
424.08 61.4436 mo
426.84 60.7236 li
426.96 61.3236 li
424.2 62.0436 li
424.08 61.4436 li
cp
428.88 60.1236 mo
431.64 59.5236 li
431.76 60.1236 li
429 60.8436 li
428.88 60.1236 li
cp
433.68 58.9236 mo
436.32 58.2036 li
436.56 58.9236 li
433.8 59.6436 li
433.68 58.9236 li
cp
438.36 57.7236 mo
441.12 57.0036 li
441.24 57.6036 li
438.6 58.3236 li
438.36 57.7236 li
cp
443.16 56.4036 mo
445.92 55.6836 li
446.04 56.4036 li
443.4 57.1236 li
443.16 56.4036 li
cp
447.96 55.2036 mo
450.6 54.4836 li
450.84 55.2036 li
448.08 55.9236 li
447.96 55.2036 li
cp
452.76 54.0036 mo
455.4 53.2836 li
455.64 54.0036 li
452.88 54.6036 li
452.76 54.0036 li
cp
457.44 52.6836 mo
460.2 51.9636 li
460.32 52.6836 li
457.68 53.4036 li
457.44 52.6836 li
cp
462.24 51.4836 mo
465 50.7636 li
465.12 51.4836 li
462.48 52.2036 li
462.24 51.4836 li
cp
467.04 50.2836 mo
469.68 49.5636 li
469.92 50.2836 li
467.16 51.0036 li
467.04 50.2836 li
cp
471.84 48.9636 mo
474.48 48.3636 li
474.72 48.9636 li
471.96 49.6836 li
471.84 48.9636 li
cp
476.52 47.7636 mo
479.28 47.0436 li
479.4 47.7636 li
476.76 48.4836 li
476.52 47.7636 li
.750179 .679652 .670191 .901488 cmyk
ef
.051036 lw
424.08 61.4436 mo
426.84 60.7236 li
426.96 61.3236 li
424.2 62.0436 li
424.08 61.4436 li
cp
@
428.88 60.1236 mo
431.64 59.5236 li
431.76 60.1236 li
429 60.8436 li
428.88 60.1236 li
cp
@
433.68 58.9236 mo
436.32 58.2036 li
436.56 58.9236 li
433.8 59.6436 li
433.68 58.9236 li
cp
@
438.36 57.7236 mo
441.12 57.0036 li
441.24 57.6036 li
438.6 58.3236 li
438.36 57.7236 li
cp
@
443.16 56.4036 mo
445.92 55.6836 li
446.04 56.4036 li
443.4 57.1236 li
443.16 56.4036 li
cp
@
447.96 55.2036 mo
450.6 54.4836 li
450.84 55.2036 li
448.08 55.9236 li
447.96 55.2036 li
cp
@
452.76 54.0036 mo
455.4 53.2836 li
455.64 54.0036 li
452.88 54.6036 li
452.76 54.0036 li
cp
@
457.44 52.6836 mo
460.2 51.9636 li
460.32 52.6836 li
457.68 53.4036 li
457.44 52.6836 li
cp
@
462.24 51.4836 mo
465 50.7636 li
465.12 51.4836 li
462.48 52.2036 li
462.24 51.4836 li
cp
@
467.04 50.2836 mo
469.68 49.5636 li
469.92 50.2836 li
467.16 51.0036 li
467.04 50.2836 li
cp
@
471.84 48.9636 mo
474.48 48.3636 li
474.72 48.9636 li
471.96 49.6836 li
471.84 48.9636 li
cp
@
476.52 47.7636 mo
479.28 47.0436 li
479.4 47.7636 li
476.76 48.4836 li
476.52 47.7636 li
cp
@
446.04 146.644 mo
448.56 145.924 li
448.68 146.524 li
446.28 147.244 li
446.04 146.644 li
cp
450.48 145.444 mo
452.88 144.844 li
453 145.444 li
450.6 146.044 li
450.48 145.444 li
cp
454.8 144.364 mo
457.2 143.764 li
457.32 144.364 li
454.92 144.964 li
454.8 144.364 li
cp
459 143.284 mo
461.52 142.564 li
461.64 143.284 li
459.24 143.884 li
459 143.284 li
cp
463.32 142.084 mo
465.84 141.484 li
465.96 142.084 li
463.56 142.804 li
463.32 142.084 li
cp
467.64 141.004 mo
470.04 140.404 li
470.28 141.004 li
467.76 141.604 li
467.64 141.004 li
cp
471.96 139.924 mo
474.48 139.204 li
474.6 139.924 li
472.08 140.524 li
471.96 139.924 li
cp
476.28 138.724 mo
478.68 138.124 li
478.92 138.724 li
476.4 139.444 li
476.28 138.724 li
cp
480.6 137.644 mo
483 137.044 li
483.24 137.644 li
480.72 138.244 li
480.6 137.644 li
cp
484.8 136.564 mo
487.32 135.844 li
487.44 136.564 li
485.04 137.164 li
484.8 136.564 li
cp
489.24 135.364 mo
491.64 134.764 li
491.76 135.364 li
489.36 135.964 li
489.24 135.364 li
cp
493.44 134.284 mo
495.96 133.684 li
496.08 134.284 li
493.68 134.884 li
493.44 134.284 li
ef
446.04 146.644 mo
448.56 145.924 li
448.68 146.524 li
446.28 147.244 li
446.04 146.644 li
cp
@
450.48 145.444 mo
452.88 144.844 li
453 145.444 li
450.6 146.044 li
450.48 145.444 li
cp
@
454.8 144.364 mo
457.2 143.764 li
457.32 144.364 li
454.92 144.964 li
454.8 144.364 li
cp
@
459 143.284 mo
461.52 142.564 li
461.64 143.284 li
459.24 143.884 li
459 143.284 li
cp
@
463.32 142.084 mo
465.84 141.484 li
465.96 142.084 li
463.56 142.804 li
463.32 142.084 li
cp
@
467.64 141.004 mo
470.04 140.404 li
470.28 141.004 li
467.76 141.604 li
467.64 141.004 li
cp
@
471.96 139.924 mo
474.48 139.204 li
474.6 139.924 li
472.08 140.524 li
471.96 139.924 li
cp
@
476.28 138.724 mo
478.68 138.124 li
478.92 138.724 li
476.4 139.444 li
476.28 138.724 li
cp
@
480.6 137.644 mo
483 137.044 li
483.24 137.644 li
480.72 138.244 li
480.6 137.644 li
cp
@
484.8 136.564 mo
487.32 135.844 li
487.44 136.564 li
485.04 137.164 li
484.8 136.564 li
cp
@
489.24 135.364 mo
491.64 134.764 li
491.76 135.364 li
489.36 135.964 li
489.24 135.364 li
cp
@
493.44 134.284 mo
495.96 133.684 li
496.08 134.284 li
493.68 134.884 li
493.44 134.284 li
cp
@
448.44 143.044 mo
444.6 144.004 li
444.36 143.284 li
448.2 142.204 li
448.44 143.044 li
ef
448.44 143.044 mo
444.6 144.004 li
444.36 143.284 li
448.2 142.204 li
448.44 143.044 li
cp
@
427.8 63.9636 mo
424.44 64.8036 li
424.2 63.9636 li
427.56 63.1236 li
427.8 63.9636 li
ef
427.8 63.9636 mo
424.44 64.8036 li
424.2 63.9636 li
427.56 63.1236 li
427.8 63.9636 li
cp
@
427.32 60.6036 mo
428.04 63.8436 li
427.08 64.0836 li
426.36 60.8436 li
427.32 60.6036 li
ef
427.32 60.6036 mo
428.04 63.8436 li
427.08 64.0836 li
426.36 60.8436 li
427.32 60.6036 li
cp
@
448.44 142.204 mo
449.28 145.924 li
448.44 146.284 li
447.72 142.564 li
448.44 142.204 li
ef
448.44 142.204 mo
449.28 145.924 li
448.44 146.284 li
447.72 142.564 li
448.44 142.204 li
cp
@
483.96 172.204 mo
487.8 172.204 li
487.8 188.044 li
483.96 188.044 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -15.84 378.931 9.11972 ]ct
<<
/T 1
/W 32 
/H 132 
/M[32 0 0 -132 0 132 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-CYmnQ('SPG'/E%qmD$gti"IJAi.#bqGH#31DaTsLtEL\>,=FcEq^?U1*^L*"s2_2FM8S!fG%>N:k
#&K1b;Ikkq:(eHI']B]_ZWq%*Z_Y'D?i4l.)j3upOF>,X,?Dtu,4UL<JNGnnke_*8,'tmo~>

%%EndBinary
grestore
np
f
476.52 166.564 mo
484.2 166.564 li
484.2 187.804 li
476.52 187.804 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[7.68 0 0 -21.24 371.491 14.7597 ]ct
<<
/T 1
/W 64 
/H 177 
/M[64 0 0 -177 0 177 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-J_%":)$jG"=3,m(GbpL\=4[]_uFJQ36)1c9-;;;[?M)mu"q!o]7rIk6S]'?;F.?T#mOjY6qH^_Sm
h?b-1m/`O<##*P^(sO3bNWC<N%/;m@9n4afM3UR,)!Y:42Xb-]&)>BKW\IcV<^Vd*odu2^:U?U9PP'-0
gS]%H(3aGsLPs/<IW_CZ>q\6758O"Y7Z@dIoh"1kDDAaR(0=\pL=KaGMgO/.(OJ%>5YZAA/KEppNq0B,
B<h=S!&H7K*W~>

%%EndBinary
grestore
np
f
388.92 105.124 mo
392.76 105.124 li
392.76 121.324 li
388.92 121.324 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -16.2 283.891 76.1997 ]ct
<<
/T 1
/W 32 
/H 135 
/M[32 0 0 -135 0 135 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^5!^ndQ!9oa_lV++.I(5%):DhB9kScG7K9%tns7?@s8##(gV-Qlgit"W0$Zpqac@JQ,kVe;(i`
%q'"%m"*grZ6/-;AfqU0bOD2,lqWXh!<W=klSgH~>

%%EndBinary
grestore
np
f
381.36 100.684 mo
389.04 100.684 li
389.04 121.924 li
381.36 121.924 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[7.68 0 0 -21.24 276.331 80.6397 ]ct
<<
/T 1
/W 64 
/H 177 
/M[64 0 0 -177 0 177 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-J_%":)$jG"=3,m(GbpL\=4[]_uFJQ36)1c9-;;;[?M)mu"q!o]7rIk6S]'?;F.?T#mOjY6qH^_Sm
h?b-1m/`O<##*P^(sO3bNWC<N%/;m@9n4afM3UR,)!Y:42Xb-]&)>BKW\IcV<^Vd*odu2^:U?U9PP'-0
gS]%H(3aGsLPs/<IW_CZ>q\6758O"Y7Z@dIoh"1kDDAaR(0=\pL=KaGMgO/.(OJ%>5YZAA/KEppNq0B,
B<h=S!&H7K*W~>

%%EndBinary
grestore
np
f
475.8 86.5236 mo
478.68 86.5236 li
478.68 102.724 li
475.8 102.724 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[2.88 0 0 -16.2 370.771 94.7997 ]ct
<<
/T 1
/W 24 
/H 135 
/M[24 0 0 -135 0 135 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-EYmnQ(&4"WmEo@M^<&c+uUklr=)'NPu,^VA/iXoG,3;Ei:&.HD,X$?OZ(+QS!QHYVR$6.c/L>,5n
nMiojUuOO&`K]$3,G/ru#r32sO5')J>0mkP6jM<r^0Rje.q3f(]`nHbo-IT~>

%%EndBinary
grestore
np
f
468.36 82.3236 mo
476.04 82.3236 li
476.04 103.564 li
468.36 103.564 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[7.68 0 0 -21.24 363.331 98.9996 ]ct
<<
/T 1
/W 64 
/H 177 
/M[64 0 0 -177 0 177 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-J_%":)$jG"=3,m(GbpL\=4[]_uFJQ36)1c9-;;;[?M)mu"q!o]7rIk6S]'?;F.?T#mOjY6qH^_Sm
h?b-1m/`O<##*P^(sO3bNWC<N%/;m@9n4afM3UR,)!Y:42Xb-]&)>BKW\IcV<^Vd*odu2^:U?U9PP'-0
gS]%H(3aGsLPs/<IW_CZ>q\6758O"Y7Z@dIoh"1kDDAaR(0=\pL=KaGMgO/.(OJ%>5YZAA/KEppNq0B,
B<h=S!&H7K*W~>

%%EndBinary
grestore
np
f
463.08 91.0836 mo
463.08 90.1236 464.04 89.2836 465 89.2836 cv
466.08 89.2836 466.92 90.1236 466.92 91.0836 cv
466.92 91.0836 li
466.92 92.1636 466.08 92.8836 465 92.8836 cv
465 92.8836 li
464.04 92.8836 463.08 92.1636 463.08 91.0836 cv
463.08 91.0836 li
.750179 .679652 .670191 .901488 cmyk
ef
435.24 98.5236 mo
438.36 97.6836 li
438.6 98.5236 li
435.36 99.3636 li
435.24 98.5236 li
cp
440.64 97.0836 mo
443.88 96.2436 li
444 97.0836 li
440.88 97.9236 li
440.64 97.0836 li
cp
446.28 95.6436 mo
449.4 94.9236 li
449.64 95.6436 li
446.4 96.4836 li
446.28 95.6436 li
cp
451.8 94.2036 mo
454.92 93.4836 li
455.16 94.2036 li
451.92 95.0436 li
451.8 94.2036 li
cp
457.32 92.7636 mo
460.44 92.0436 li
460.68 92.7636 li
457.56 93.6036 li
457.32 92.7636 li
cp
435.24 99.0036 mo
437.88 100.564 li
433.2 99.4836 li
436.8 96.2436 li
435.24 99.0036 li
cp
461.88 92.0436 mo
459.24 90.4836 li
464.04 91.4436 li
460.32 94.6836 li
461.88 92.0436 li
ef
435.24 98.5236 mo
438.36 97.6836 li
438.6 98.5236 li
435.36 99.3636 li
435.24 98.5236 li
cp
@
440.64 97.0836 mo
443.88 96.2436 li
444 97.0836 li
440.88 97.9236 li
440.64 97.0836 li
cp
@
446.28 95.6436 mo
449.4 94.9236 li
449.64 95.6436 li
446.4 96.4836 li
446.28 95.6436 li
cp
@
451.8 94.2036 mo
454.92 93.4836 li
455.16 94.2036 li
451.92 95.0436 li
451.8 94.2036 li
cp
@
457.32 92.7636 mo
460.44 92.0436 li
460.68 92.7636 li
457.56 93.6036 li
457.32 92.7636 li
cp
@
435.24 99.0036 mo
437.88 100.564 li
433.2 99.4836 li
436.8 96.2436 li
435.24 99.0036 li
cp
@
461.88 92.0436 mo
459.24 90.4836 li
464.04 91.4436 li
460.32 94.6836 li
461.88 92.0436 li
cp
@
433.92 24.7236 mo
433.92 23.6436 434.88 22.6836 435.96 22.6836 cv
435.96 22.6836 li
437.16 22.6836 438 23.6436 438 24.7236 cv
438 24.7236 li
438 25.9236 437.16 26.7636 435.96 26.7636 cv
435.96 26.7636 li
434.88 26.7636 433.92 25.9236 433.92 24.7236 cv
433.92 24.7236 li
ef
424.44 57.8436 mo
425.52 54.7236 li
426.36 54.9636 li
425.28 58.0836 li
424.44 57.8436 li
cp
426.36 52.4436 mo
427.32 49.3236 li
428.16 49.5636 li
427.08 52.6836 li
426.36 52.4436 li
cp
428.16 46.9236 mo
429.12 43.8036 li
429.96 44.1636 li
428.88 47.2836 li
428.16 46.9236 li
cp
429.96 41.5236 mo
431.04 38.4036 li
431.76 38.6436 li
430.68 41.7636 li
429.96 41.5236 li
cp
431.76 36.1236 mo
432.84 33.0036 li
433.56 33.2436 li
432.48 36.3636 li
431.76 36.1236 li
cp
433.56 30.6036 mo
434.52 27.9636 li
435.24 28.2036 li
434.4 30.9636 li
433.56 30.6036 li
cp
424.92 57.9636 mo
427.68 56.6436 li
424.2 60.0036 li
423.48 55.2036 li
424.92 57.9636 li
cp
434.88 28.0836 mo
432.12 29.5236 li
435.48 26.0436 li
436.2 30.8436 li
434.88 28.0836 li
ef
424.44 57.8436 mo
425.52 54.7236 li
426.36 54.9636 li
425.28 58.0836 li
424.44 57.8436 li
cp
@
426.36 52.4436 mo
427.32 49.3236 li
428.16 49.5636 li
427.08 52.6836 li
426.36 52.4436 li
cp
@
428.16 46.9236 mo
429.12 43.8036 li
429.96 44.1636 li
428.88 47.2836 li
428.16 46.9236 li
cp
@
429.96 41.5236 mo
431.04 38.4036 li
431.76 38.6436 li
430.68 41.7636 li
429.96 41.5236 li
cp
@
431.76 36.1236 mo
432.84 33.0036 li
433.56 33.2436 li
432.48 36.3636 li
431.76 36.1236 li
cp
@
433.56 30.6036 mo
434.52 27.9636 li
435.24 28.2036 li
434.4 30.9636 li
433.56 30.6036 li
cp
@
424.92 57.9636 mo
427.68 56.6436 li
424.2 60.0036 li
423.48 55.2036 li
424.92 57.9636 li
cp
@
434.88 28.0836 mo
432.12 29.5236 li
435.48 26.0436 li
436.2 30.8436 li
434.88 28.0836 li
cp
@
448.08 148.324 mo
450.6 150.484 li
450.12 151.084 li
447.6 148.924 li
448.08 148.324 li
cp
452.4 152.044 mo
454.92 154.324 li
454.32 154.924 li
451.92 152.764 li
452.4 152.044 li
cp
456.72 155.884 mo
459.24 158.044 li
458.64 158.644 li
456.24 156.484 li
456.72 155.884 li
cp
461.04 159.604 mo
463.44 161.764 li
462.96 162.364 li
460.44 160.204 li
461.04 159.604 li
cp
465.36 163.444 mo
467.76 165.604 li
467.28 166.204 li
464.76 164.044 li
465.36 163.444 li
cp
447.84 148.684 mo
448.08 151.684 li
446.16 147.124 li
450.96 148.444 li
447.84 148.684 li
cp
469.2 167.404 mo
469.08 164.284 li
470.88 168.844 li
466.2 167.644 li
469.2 167.404 li
ef
448.08 148.324 mo
450.6 150.484 li
450.12 151.084 li
447.6 148.924 li
448.08 148.324 li
cp
@
452.4 152.044 mo
454.92 154.324 li
454.32 154.924 li
451.92 152.764 li
452.4 152.044 li
cp
@
456.72 155.884 mo
459.24 158.044 li
458.64 158.644 li
456.24 156.484 li
456.72 155.884 li
cp
@
461.04 159.604 mo
463.44 161.764 li
462.96 162.364 li
460.44 160.204 li
461.04 159.604 li
cp
@
465.36 163.444 mo
467.76 165.604 li
467.28 166.204 li
464.76 164.044 li
465.36 163.444 li
cp
@
447.84 148.684 mo
448.08 151.684 li
446.16 147.124 li
450.96 148.444 li
447.84 148.684 li
cp
@
469.2 167.404 mo
469.08 164.284 li
470.88 168.844 li
466.2 167.644 li
469.2 167.404 li
cp
@
378.12 106.684 mo
378.12 106.204 378.48 105.844 378.84 105.844 cv
378.84 105.844 li
379.32 105.844 379.68 106.204 379.68 106.684 cv
379.68 106.684 li
379.68 107.044 379.32 107.404 378.84 107.404 cv
378.84 107.404 li
378.48 107.404 378.12 107.044 378.12 106.684 cv
378.12 106.684 li
ef
464.88 102.484 mo
467.76 102.484 li
467.76 134.884 li
464.88 134.884 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[2.88 0 0 -32.4 359.851 78.8397 ]ct
<<
/T 1
/W 24 
/H 270 
/M[24 0 0 -270 0 270 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^6Z748AjU*s*Hj(l8MI"98N(`UTi:~>

%%EndBinary
grestore
np
f
468.48 102.604 mo
474.24 102.604 li
474.24 127.804 li
468.48 127.804 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[5.76 0 0 -25.2 363.451 78.7197 ]ct
<<
/T 1
/W 48 
/H 210 
/M[48 0 0 -210 0 210 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-J0a\%,$jG!2;cn>KO5eRZBHG.'JYe(a,V_!ZZfSK`5oth)aUbUkf<4!]-Gmtng=]#@%Pm+dVEiH>
4p(ni^lT:$LMa'YEocN,TmCar=8H,1CjI#QX;2PCEbD`V_t]NZGq"1(n'6'YG5Ie8_s-M[aXeaOQ)(8q
P,Et]%\.q*jH%u*,8IKai#2U`Ha=s~>

%%EndBinary
grestore
np
f
474.84 109.684 mo
476.76 109.684 li
476.76 119.404 li
474.84 119.404 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[1.92 0 0 -9.72 369.811 71.6397 ]ct
<<
/T 1
/W 16 
/H 81 
/M[16 0 0 -81 0 81 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5NTH@iTpqT_D+O@j\^jL\&!TOE>*t/lLJJn_3#!3B\Z`F+-s6p!&s*qiR8,W\i#Q,$]!<<jb)!1~>

%%EndBinary
grestore
np
f
478.56 102.604 mo
482.4 102.604 li
482.4 127.444 li
478.56 127.444 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -24.84 373.531 78.7197 ]ct
<<
/T 1
/W 32 
/H 207 
/M[32 0 0 -207 0 207 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^6[b0W>$OrrEB]s8U!PnG`SehuNq4rINp_lOP[/!:fOX#Cq7e^`X0+lp/ei+!S`J&&dg"b]nX=
0E=[Z;3C~>

%%EndBinary
grestore
np
f
483.72 102.484 mo
486.6 102.484 li
486.6 134.884 li
483.72 134.884 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[2.88 0 0 -32.4 378.691 78.8397 ]ct
<<
/T 1
/W 24 
/H 270 
/M[24 0 0 -270 0 270 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^6Z748AjU*um#>O$nX@!e::OQn`B'~>

%%EndBinary
grestore
np
f
442.44 101.884 mo
446.28 101.884 li
446.28 117.724 li
442.44 117.724 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -15.84 337.411 79.4397 ]ct
<<
/T 1
/W 32 
/H 132 
/M[32 0 0 -132 0 132 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^78LF[5l/JUudt!sXL3![,MbLi%ZE#)MB6Qld1J'sf,njo_QLnGr\IHpGRa8/Pr9%8bq(+DlnO
L!0rrQ8&@D!1ip#`;~>

%%EndBinary
grestore
np
f
445.92 105.244 mo
455.52 105.244 li
455.52 136.204 li
445.92 136.204 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[9.6 0 0 -30.96 340.891 76.0797 ]ct
<<
/T 1
/W 80 
/H 258 
/M[80 0 0 -258 0 258 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-K0l"W\&-^Dm.]*N^9bh#DDkO/l#jDHE#q8d78qoK"%(X/?)AgCX1D22S4"A\GJj*;L_FQI-&bYeg
o^qe2:S+SL>]cL9k,Pb_j]ZB3f'$eG@RkFiG#>1^:N)8VUN)XeZ@.a6ed#doqU+edKd*m,rWZ>*&d+L<
>LBO1(8tD9P-nm*i#Rd*UtTM[K\3.PnIO]K8/6Rs0.NOI/*'M`66=<$\LKoeM?9m9A<Y$_:nDU>1f&aH
REc6rm,t4=BW(#do+^P5hART-B1,DdTLs9sDQ2TE[eVi^J-a\f~>

%%EndBinary
grestore
np
f
457.68 105.844 mo
463.44 105.844 li
463.44 120.964 li
457.68 120.964 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[5.76 0 0 -15.12 352.651 75.4797 ]ct
<<
/T 1
/W 48 
/H 126 
/M[48 0 0 -126 0 126 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^2,teGoPuJ:[Y`Lm/..ojADg(`4+iJ5e4P!0QUY5U:g]Lm2O;OEP$[##*TuaU0<a#FPF>7/dFB
".1@>RNEC/e0*EGYu)"Q%1lT,>R5=$`8qP;0\@WGNYtNBKFRtd!)M$6g]~>

%%EndBinary
grestore
np
f
473.4 32.8836 mo
477.24 32.8836 li
477.24 57.7236 li
473.4 57.7236 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -24.84 368.371 148.44 ]ct
<<
/T 1
/W 32 
/H 207 
/M[32 0 0 -207 0 207 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^6[b0W>$OrrEB]rr9mOnG`SehuNq4rINp_lOP[/!:fOX#Cq7e^`X0+lp/ei+!S`J&&dg"b]nX=
0E=U@;31~>

%%EndBinary
grestore
np
f
450.24 31.3236 mo
454.08 31.3236 li
454.08 50.7636 li
450.24 50.7636 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 345.211 150 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
452.76 35.1636 mo
462.36 35.1636 li
462.36 66.1236 li
452.76 66.1236 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[9.6 0 0 -30.96 347.731 146.16 ]ct
<<
/T 1
/W 80 
/H 258 
/M[80 0 0 -258 0 258 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-K0l"W\&-^Dm.]*N^9bh#DDkO/l#jDHE#q8d78qoK"%(X/?)AgCX1D22S4"A\GJj*;L_FQI-&bYeg
o^qe2:S+SL>]cL9k,Pb_j]ZB3f'$eG@RkFiG#>1^:N)8VUN)XeZ@.a6ed#doqU+edKd*m,rWZ>*&d+L<
>LBO1(8tD9P-nm*i#Rd*UtTM[K\3.PnIO]K8/6Rs0.NOI/*'M`66=<$\LKoeM?9m9A<Y$_:nDU>1f&aH
REc6rm,t4=BW(#do+^P5hART-B1,DdTLs9sDQ2TE[eVi^J-a\f~>

%%EndBinary
grestore
np
f
464.64 35.0436 mo
470.4 35.0436 li
470.4 52.3236 li
464.64 52.3236 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[5.76 0 0 -17.28 359.611 146.28 ]ct
<<
/T 1
/W 48 
/H 144 
/M[48 0 0 -144 0 144 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^6[bI*_j?++VHT@.GD,r"#*t#>=Q=,o@d<ojA)OYQXhFYf)$I_u[*\#P'.-ru`kJfE>%YOThe=
kb;&O+2UMZha)Yd%k.W&+GC53!'/I_-3~>

%%EndBinary
grestore
np
f
490.68 149.524 mo
496.44 149.524 li
496.44 174.724 li
490.68 174.724 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[5.76 0 0 -25.2 385.651 31.7997 ]ct
<<
/T 1
/W 48 
/H 210 
/M[48 0 0 -210 0 210 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-J5n4#0&-^E6(7(!=-uLp_bu#IsZ5:B*Kh5'd3LQFq]X1Y4eH_U*FmA].Of4kNkngb<;'3[eNpRX!
!ZF-s'rF7F$X2-VO=a\F5ddG`IEU)$r%Qt:_mE+ln7<^(ru%\:rqK=XR@Z@0'6-)")=OoX1hJL!,up:*
O%Gd[\>2/!G0tf&f=f=b'Z`'1mf<F7q4Z7~>

%%EndBinary
grestore
np
f
468.36 147.244 mo
472.2 147.244 li
472.2 166.684 li
468.36 166.684 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 363.331 34.0797 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
470.88 149.644 mo
480.48 149.644 li
480.48 180.604 li
470.88 180.604 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[9.6 0 0 -30.96 365.851 31.6797 ]ct
<<
/T 1
/W 80 
/H 258 
/M[80 0 0 -258 0 258 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-K0l"W\&-^Dm.]*N^9bh#DDkO/l#jDHE#q8d78qoK"%(X/?)AgCX1D22S4"A\GJj*;L_FQI-&bYeg
o^qe2:S+SL>]cL9k,Pb_j]ZB3f'$eG@RkFiG#>1^:N)8VUN)XeZ@.a6ed#doqU+edKd*m,rWZ>*&d+L<
>LBO1(8tD9P-nm*i#Rd*UtTM[K\3.PnIO]K8/6Rs0.NOI/*'M`66=<$\LKoeM?9m9A<Y$_:nDU>1f&aH
REc6rm,t4=BW(#do+^P5hART-B1,DdTLs9sDQ2TE[eVi^J-a\f~>

%%EndBinary
grestore
np
f
482.28 151.444 mo
488.04 151.444 li
488.04 167.284 li
482.28 167.284 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[5.76 0 0 -15.84 377.251 29.8797 ]ct
<<
/T 1
/W 48 
/H 132 
/M[48 0 0 -132 0 132 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^6Z7%1%L+!YE3C!CX5G8U3#crrA-grWcp'rrA2T&&?$k\:rVP_X_*nHB9i@J$>o%&>n##!39]s
O:W"[/4:d/Z33BoK)#oZg_QiJ&DJ?\+XA4lj?&/n+hhP"!"8l$f.J'~>

%%EndBinary
grestore
np
f
342.6 165.844 mo
349.32 165.844 li
349.32 173.404 li
342.6 173.404 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[6.72 0 0 -7.56 237.571 15.4797 ]ct
<<
/T 1
/W 56 
/H 63 
/M[56 0 0 -63 0 63 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^5T/Ik^YQPo:c\!<W<E5rZU~>

%%EndBinary
grestore
np
f
339.36 172.084 mo
341.28 172.084 li
341.28 187.924 li
339.36 187.924 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[1.92 0 0 -15.84 234.331 9.23972 ]ct
<<
/T 1
/W 16 
/H 132 
/M[16 0 0 -132 0 132 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(g<U35Q;8f&'PQ_!KTIDIj"cAr;kp\L'59l%)=9t~>

%%EndBinary
grestore
np
f
326.52 159.244 mo
330.36 159.244 li
330.36 178.684 li
326.52 178.684 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 221.491 22.0797 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
330.6 164.524 mo
340.2 164.524 li
340.2 189.364 li
330.6 189.364 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[9.6 0 0 -24.84 225.571 16.7997 ]ct
<<
/T 1
/W 80 
/H 207 
/M[80 0 0 -207 0 207 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-J9b)du&;K-e/6mK(Dc/3"PbW44H39UR84oEC1CRI?G/q(<9JC`\J?cAaZ*AdRZ1]MMKfp<*36@?E
8WGWM1o'LfOHtn@*]NJB2^-c%N^T--Oc6SG+%r=&B"_I"dnqMWI?j=:MC,Q.$:WdXETi%O8-^[[g([rG
-1iB[69S":[cBH12d)6FKN\p]SjEI\;Yd0kCZW1a0#B/.a]X4k:Qd!@Z7.9:]A&R5'Ycop^EMX"M"hsB
FALcp!7K$Kdf~>

%%EndBinary
grestore
np
f
360.36 174.364 mo
364.2 174.364 li
364.2 193.804 li
360.36 193.804 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 255.331 6.95971 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
352.8 163.204 mo
365.28 163.204 li
365.28 198.844 li
352.8 198.844 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[12.48 0 0 -35.64 247.771 18.1197 ]ct
<<
/T 1
/W 104 
/H 297 
/M[104 0 0 -297 0 297 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-M5n\em$jBHE(G%Ru8)\-+1lfEb>e4lJ-'/C7>Gg0;DsWsR@Jm!&8g9Bg,SGr%o"P4LndRX.Nc^IH
_%UF2K4+e(L8cm.D""&^i>S?niEI94E%PH#F,+<,B-UgbVF)?=g#>$mh-m,T?d#m*PfNG'29L012lf6C
O[l4Q/_uX@e[0#BY:gP#e@84Sl4pM"N'gDnVI1p1]P4q6EY&7DV,>X>H'$@MB"/7D#[HWL+ne_<bLl8c
\a0]Zihq-XCB5Zq2LE@]W,+e6Rr9ufM#=]#&H0BU^';:=oY_D[>sc4>fDea^8K+TL.pqX=qj&;p"TSQ&
rrW6)*lOl~>

%%EndBinary
grestore
np
f
339.36 28.8036 mo
346.08 28.8036 li
346.08 36.3636 li
339.36 36.3636 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[6.72 0 0 -7.56 234.331 152.52 ]ct
<<
/T 1
/W 56 
/H 63 
/M[56 0 0 -63 0 63 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^5T/Ik^YQPo:c\!<W<E5rZU~>

%%EndBinary
grestore
np
f
335.28 35.0436 mo
339.12 35.0436 li
339.12 50.8836 li
335.28 50.8836 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -15.84 230.251 146.28 ]ct
<<
/T 1
/W 32 
/H 132 
/M[32 0 0 -132 0 132 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-FYmGq7'SPE]!_FWf.=s?X>%O"YO9rkI`3HCkr_G'rD<sC[RY0Wgrd:4+R]>dOQ*+O^6:R#d#eq'n
An,a/)Fbu_F9m]lE%;Ftb^?bsiGoD._aYd?~>

%%EndBinary
grestore
np
f
323.28 22.2036 mo
327.12 22.2036 li
327.12 41.6436 li
323.28 41.6436 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 218.251 159.12 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
327.36 27.4836 mo
336.96 27.4836 li
336.96 52.3236 li
327.36 52.3236 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[9.6 0 0 -24.84 222.331 153.84 ]ct
<<
/T 1
/W 80 
/H 207 
/M[80 0 0 -207 0 207 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-J9b)du&;K-e/6mK(Dc/3"PbW44H39UR84oEC1CRI?G/q(<9JC`\J?cAaZ*AdRZ1]MMKfp<*36@?E
8WGWM1o'LfOHtn@*]NJB2^-c%N^T--Oc6SG+%r=&B"_I"dnqMWI?j=:MC,Q.$:WdXETi%O8-^[[g([rG
-1iB[69S":[cBH12d)6FKN\p]SjEI\;Yd0kCZW1a0#B/.a]X4k:Qd!@Z7.9:]A&R5'Ycop^EMX"M"hsB
FALcp!7K$Kdf~>

%%EndBinary
grestore
np
f
357.36 37.3236 mo
361.2 37.3236 li
361.2 56.7636 li
357.36 56.7636 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 252.331 144 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
361.56 37.5636 mo
366.36 37.5636 li
366.36 49.8036 li
361.56 49.8036 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[4.8 0 0 -12.24 256.531 143.76 ]ct
<<
/T 1
/W 40 
/H 102 
/M[40 0 0 -102 0 102 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^8Co#H18m#D*%cK%_OR"opA6+aF~>

%%EndBinary
grestore
np
f
366.6 36.8436 mo
369.48 36.8436 li
369.48 52.6836 li
366.6 52.6836 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[2.88 0 0 -15.84 261.571 144.48 ]ct
<<
/T 1
/W 24 
/H 132 
/M[24 0 0 -132 0 132 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^2&Os$$Vc*sVEL%*W+t#XLZl(uV=sL?]TmlsN@*NZ&c0@>Oj^!\loi+h43fO:;'i6LoUCR"5Z+
^];Km+ee~>

%%EndBinary
grestore
np
f
349.56 26.2836 mo
362.04 26.2836 li
362.04 61.9236 li
349.56 61.9236 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[12.48 0 0 -35.64 244.531 155.04 ]ct
<<
/T 1
/W 104 
/H 297 
/M[104 0 0 -297 0 297 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-M5n\em$jBHE(G%Ru8)\-+1lfEb>e4lJ-'/C7>Gg0;DsWsR@Jm!&8g9Bg,SGr%o"P4LndRX.Nc^IH
_%UF2K4+e(L8cm.D""&^i>S?niEI94E%PH#F,+<,B-UgbVF)?=g#>$mh-m,T?d#m*PfNG'29L012lf6C
O[l4Q/_uX@e[0#BY:gP#e@84Sl4pM"N'gDnVI1p1]P4q6EY&7DV,>X>H'$@MB"/7D#[HWL+ne_<bLl8c
\a0]Zihq-XCB5Zq2LE@]W,+e6Rr9ufM#=]#&H0BU^';:=oY_D[>sc4>fDea^8K+TL.pqX=qj&;p"TSQ&
rrW6)*lOl~>

%%EndBinary
grestore
np
f
335.04 159.004 mo
335.04 158.164 335.76 157.444 336.6 157.444 cv
336.6 157.444 li
337.44 157.444 338.16 158.164 338.16 159.004 cv
338.16 159.004 li
338.16 159.844 337.44 160.564 336.6 160.564 cv
336.6 160.564 li
335.76 160.564 335.04 159.844 335.04 159.004 cv
335.04 159.004 li
.750179 .679652 .670191 .901488 cmyk
ef
339.84 40.9236 mo
339.84 40.0836 340.56 39.3636 341.4 39.3636 cv
341.4 39.3636 li
342.24 39.3636 342.96 40.0836 342.96 40.9236 cv
342.96 40.9236 li
342.96 41.7636 342.24 42.4836 341.4 42.4836 cv
341.4 42.4836 li
340.56 42.4836 339.84 41.7636 339.84 40.9236 cv
339.84 40.9236 li
ef
419.04 54.0036 mo
421.92 54.0036 li
421.92 70.2036 li
419.04 70.2036 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[2.88 0 0 -16.2 314.011 127.32 ]ct
<<
/T 1
/W 24 
/H 135 
/M[24 0 0 -135 0 135 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-EYmnQ(&4"WmEo@M^<&c+uUklr=)'NPu,^VA/iXoG,3;Ei:&.HD,X$?OZ(+QS!QHYVR$6.c/L>,5n
nMiojUuOO&`K]$3,G/ru#r32sO5')J>0mkP6jM<r^0Rje.q3f(]`nHbo-IT~>

%%EndBinary
grestore
np
f
406.8 41.1636 mo
410.64 41.1636 li
410.64 60.6036 li
406.8 60.6036 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 301.771 140.16 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
410.88 46.4436 mo
420.48 46.4436 li
420.48 71.2836 li
410.88 71.2836 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[9.6 0 0 -24.84 305.851 134.88 ]ct
<<
/T 1
/W 80 
/H 207 
/M[80 0 0 -207 0 207 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-J9b)du&;K-e/6mK(Dc/3"PbW44H39UR84oEC1CRI?G/q(<9JC`\J?cAaZ*AdRZ1]MMKfp<*36@?E
8WGWM1o'LfOHtn@*]NJB2^-c%N^T--Oc6SG+%r=&B"_I"dnqMWI?j=:MC,Q.$:WdXETi%O8-^[[g([rG
-1iB[69S":[cBH12d)6FKN\p]SjEI\;Yd0kCZW1a0#B/.a]X4k:Qd!@Z7.9:]A&R5'Ycop^EMX"M"hsB
FALcp!7K$Kdf~>

%%EndBinary
grestore
np
f
447.96 161.404 mo
451.8 161.404 li
451.8 177.244 li
447.96 177.244 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -15.84 342.931 19.9197 ]ct
<<
/T 1
/W 32 
/H 132 
/M[32 0 0 -132 0 132 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-CYmnQ('SPG'/E%qmD$gti"IJAi.#bqGH#31DaTsLtEL\>,=FcEq^?U1*^L*"s2_2FM8S!fG%>N:k
#&K1b;Ikkq:(eHI']B]_ZWq%*Z_Y'D?i4l.)j3upOF>,X,?Dtu,4UL<JNGnnke_*8,'tmo~>

%%EndBinary
grestore
np
f
435.96 148.564 mo
439.8 148.564 li
439.8 168.004 li
435.96 168.004 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[3.84 0 0 -19.44 330.931 32.7597 ]ct
<<
/T 1
/W 32 
/H 162 
/M[32 0 0 -162 0 162 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gar5N(^385fE$!j!=":>%i?.4'EGBA"%.VK:f%XXje8'V!J/o7+CUoiAgGUq!=Ac+C.-'kJ@GdigEC!P
,g3t?C)N+Fr8.Ko+l`SchC(XqX8jpS1n>g%~>

%%EndBinary
grestore
np
f
440.04 153.724 mo
449.64 153.724 li
449.64 178.564 li
440.04 178.564 li
cp
.750179 .679652 .670191 .901488 cmyk
gsave
clp
[1 0 0 -1 105.029 181.323 ]ct
[9.6 0 0 -24.84 335.011 27.5997 ]ct
<<
/T 1
/W 80 
/H 207 
/M[80 0 0 -207 0 207 ]
/BC 1 
/D[1 0 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 1
>>
%%BeginBinary: 1
img
Gb"-J9b)du&;K-e/6mK(Dc/3"PbW44H39UR84oEC1CRI?G/q(<9JC`\J?cAaZ*AdRZ1]MMKfp<*36@?E
8WGWM1o'LfOHtn@*]NJB2^-c%N^T--Oc6SG+%r=&B"_I"dnqMWI?j=:MC,Q.$:WdXETi%O8-^[[g([rG
-1iB[69S":[cBH12d)6FKN\p]SjEI\;Yd0kCZW1a0#B/.a]X4k:Qd!@Z7.9:]A&R5'Ycop^EMX"M"hsB
FALcp!7K$Kdf~>

%%EndBinary
grestore
np
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/XURILP+TTE25F8518t00*1 uf
/XURILP+TTE25F8518t00 uf
/FKTBAA+TTE25F8518t00 uf
/XURILO+TTE2578B10t00*1 uf
/XURILO+TTE2578B10t00 uf
/HCXBAA+TTE2578B10t00 uf
/XURILN+TTE2559458t00*1 uf
/XURILN+TTE2559458t00 uf
/LQACAA+TTE2559458t00 uf
/XURILM+Symbol*1 uf
/XURILM+Symbol uf
/TEABAA+Symbol uf
/XURILL+TTE25F6AE8t00*1 uf
/XURILL+TTE25F6AE8t00 uf
/BMGBAA+TTE25F6AE8t00 uf
/XURILK+Times-Italic*1 uf
/XURILK+Times-Italic uf
/OOLBAA+Times-Italic uf
/XURILJ+TTE25798A0t00*1 uf
/XURILJ+TTE25798A0t00 uf
/NKWBAA+TTE25798A0t00 uf
/XURILI+Times-Bold*1 uf
/XURILI+Times-Bold uf
/XOSAAA+Times-Bold uf
/XURILH+Times-Roman*1 uf
/XURILH+Times-Roman uf
/ONKBAA+Times-Roman uf
/XURILG+TTE22082D8t00*1 uf
/XURILG+TTE22082D8t00 uf
/WGJAAA+TTE22082D8t00 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
